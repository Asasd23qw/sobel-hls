-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dataflow_in_loop is
port (
    p_read : IN STD_LOGIC_VECTOR (31 downto 0);
    img_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    img_data_stream_0_V_empty_n : IN STD_LOGIC;
    img_data_stream_0_V_read : OUT STD_LOGIC;
    img_data_stream_1_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    img_data_stream_1_V_empty_n : IN STD_LOGIC;
    img_data_stream_1_V_read : OUT STD_LOGIC;
    img_data_stream_2_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    img_data_stream_2_V_empty_n : IN STD_LOGIC;
    img_data_stream_2_V_read : OUT STD_LOGIC;
    r : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_pMemPort_AWVALID : OUT STD_LOGIC;
    m_axi_pMemPort_AWREADY : IN STD_LOGIC;
    m_axi_pMemPort_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_pMemPort_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_pMemPort_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_pMemPort_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_pMemPort_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_pMemPort_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_pMemPort_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_pMemPort_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_pMemPort_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_pMemPort_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_pMemPort_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_pMemPort_WVALID : OUT STD_LOGIC;
    m_axi_pMemPort_WREADY : IN STD_LOGIC;
    m_axi_pMemPort_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_pMemPort_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_pMemPort_WLAST : OUT STD_LOGIC;
    m_axi_pMemPort_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_pMemPort_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_pMemPort_ARVALID : OUT STD_LOGIC;
    m_axi_pMemPort_ARREADY : IN STD_LOGIC;
    m_axi_pMemPort_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_pMemPort_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_pMemPort_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_pMemPort_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_pMemPort_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_pMemPort_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_pMemPort_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_pMemPort_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_pMemPort_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_pMemPort_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_pMemPort_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_pMemPort_RVALID : IN STD_LOGIC;
    m_axi_pMemPort_RREADY : OUT STD_LOGIC;
    m_axi_pMemPort_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_pMemPort_RLAST : IN STD_LOGIC;
    m_axi_pMemPort_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_pMemPort_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_pMemPort_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_pMemPort_BVALID : IN STD_LOGIC;
    m_axi_pMemPort_BREADY : OUT STD_LOGIC;
    m_axi_pMemPort_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_pMemPort_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_pMemPort_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    row : IN STD_LOGIC_VECTOR (30 downto 0);
    index : IN STD_LOGIC_VECTOR (31 downto 0);
    baseAddr_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    baseAddr_ce0 : OUT STD_LOGIC;
    baseAddr_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    baseAddr_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    baseAddr_we0 : OUT STD_LOGIC;
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    p_read_ap_vld : IN STD_LOGIC;
    r_ap_vld : IN STD_LOGIC;
    row_ap_vld : IN STD_LOGIC;
    index_ap_vld : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC );
end;


architecture behav of dataflow_in_loop is 
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";

    signal Loop_0_proc56_U0_ap_start : STD_LOGIC;
    signal Loop_0_proc56_U0_ap_done : STD_LOGIC;
    signal Loop_0_proc56_U0_ap_continue : STD_LOGIC;
    signal Loop_0_proc56_U0_ap_idle : STD_LOGIC;
    signal Loop_0_proc56_U0_ap_ready : STD_LOGIC;
    signal Loop_0_proc56_U0_img_data_stream_0_V_read : STD_LOGIC;
    signal Loop_0_proc56_U0_img_data_stream_1_V_read : STD_LOGIC;
    signal Loop_0_proc56_U0_img_data_stream_2_V_read : STD_LOGIC;
    signal Loop_0_proc56_U0_cacheBuff1_i_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_0_proc56_U0_cacheBuff1_i_write : STD_LOGIC;
    signal Loop_0_proc56_U0_img_cols_V_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_0_proc56_U0_img_cols_V_out_write : STD_LOGIC;
    signal Loop_0_proc56_U0_r_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_0_proc56_U0_r_out_write : STD_LOGIC;
    signal Loop_0_proc56_U0_row_out_din : STD_LOGIC_VECTOR (30 downto 0);
    signal Loop_0_proc56_U0_row_out_write : STD_LOGIC;
    signal Loop_0_proc56_U0_index_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_0_proc56_U0_index_out_write : STD_LOGIC;
    signal writemem_U0_ap_start : STD_LOGIC;
    signal writemem_U0_ap_done : STD_LOGIC;
    signal writemem_U0_ap_continue : STD_LOGIC;
    signal writemem_U0_ap_idle : STD_LOGIC;
    signal writemem_U0_ap_ready : STD_LOGIC;
    signal writemem_U0_m_axi_pMemPort_AWVALID : STD_LOGIC;
    signal writemem_U0_m_axi_pMemPort_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal writemem_U0_m_axi_pMemPort_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal writemem_U0_m_axi_pMemPort_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal writemem_U0_m_axi_pMemPort_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal writemem_U0_m_axi_pMemPort_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal writemem_U0_m_axi_pMemPort_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal writemem_U0_m_axi_pMemPort_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal writemem_U0_m_axi_pMemPort_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal writemem_U0_m_axi_pMemPort_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal writemem_U0_m_axi_pMemPort_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal writemem_U0_m_axi_pMemPort_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal writemem_U0_m_axi_pMemPort_WVALID : STD_LOGIC;
    signal writemem_U0_m_axi_pMemPort_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal writemem_U0_m_axi_pMemPort_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal writemem_U0_m_axi_pMemPort_WLAST : STD_LOGIC;
    signal writemem_U0_m_axi_pMemPort_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal writemem_U0_m_axi_pMemPort_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal writemem_U0_m_axi_pMemPort_ARVALID : STD_LOGIC;
    signal writemem_U0_m_axi_pMemPort_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal writemem_U0_m_axi_pMemPort_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal writemem_U0_m_axi_pMemPort_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal writemem_U0_m_axi_pMemPort_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal writemem_U0_m_axi_pMemPort_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal writemem_U0_m_axi_pMemPort_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal writemem_U0_m_axi_pMemPort_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal writemem_U0_m_axi_pMemPort_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal writemem_U0_m_axi_pMemPort_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal writemem_U0_m_axi_pMemPort_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal writemem_U0_m_axi_pMemPort_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal writemem_U0_m_axi_pMemPort_RREADY : STD_LOGIC;
    signal writemem_U0_m_axi_pMemPort_BREADY : STD_LOGIC;
    signal writemem_U0_img_cols_V_read : STD_LOGIC;
    signal writemem_U0_row_read : STD_LOGIC;
    signal writemem_U0_index_read : STD_LOGIC;
    signal writemem_U0_r_read : STD_LOGIC;
    signal writemem_U0_from_read : STD_LOGIC;
    signal writemem_U0_baseAddr_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal writemem_U0_baseAddr_ce0 : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal cacheBuff_full_n : STD_LOGIC;
    signal cacheBuff_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal cacheBuff_empty_n : STD_LOGIC;
    signal img_cols_V_c_full_n : STD_LOGIC;
    signal img_cols_V_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal img_cols_V_c_empty_n : STD_LOGIC;
    signal r_c_full_n : STD_LOGIC;
    signal r_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal r_c_empty_n : STD_LOGIC;
    signal row_c_full_n : STD_LOGIC;
    signal row_c_dout : STD_LOGIC_VECTOR (30 downto 0);
    signal row_c_empty_n : STD_LOGIC;
    signal index_c_full_n : STD_LOGIC;
    signal index_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal index_c_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal ap_sync_reg_Loop_0_proc56_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_Loop_0_proc56_U0_ap_ready : STD_LOGIC;
    signal Loop_0_proc56_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ap_sync_reg_writemem_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_writemem_U0_ap_ready : STD_LOGIC;
    signal writemem_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal Loop_0_proc56_U0_start_full_n : STD_LOGIC;
    signal Loop_0_proc56_U0_start_write : STD_LOGIC;
    signal writemem_U0_start_full_n : STD_LOGIC;
    signal writemem_U0_start_write : STD_LOGIC;

    component Loop_0_proc56 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (31 downto 0);
        img_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_0_V_empty_n : IN STD_LOGIC;
        img_data_stream_0_V_read : OUT STD_LOGIC;
        img_data_stream_1_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_1_V_empty_n : IN STD_LOGIC;
        img_data_stream_1_V_read : OUT STD_LOGIC;
        img_data_stream_2_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_2_V_empty_n : IN STD_LOGIC;
        img_data_stream_2_V_read : OUT STD_LOGIC;
        cacheBuff1_i_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        cacheBuff1_i_full_n : IN STD_LOGIC;
        cacheBuff1_i_write : OUT STD_LOGIC;
        r : IN STD_LOGIC_VECTOR (31 downto 0);
        row : IN STD_LOGIC_VECTOR (30 downto 0);
        img_cols_V_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        img_cols_V_out_full_n : IN STD_LOGIC;
        img_cols_V_out_write : OUT STD_LOGIC;
        r_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        r_out_full_n : IN STD_LOGIC;
        r_out_write : OUT STD_LOGIC;
        row_out_din : OUT STD_LOGIC_VECTOR (30 downto 0);
        row_out_full_n : IN STD_LOGIC;
        row_out_write : OUT STD_LOGIC;
        index_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        index_out_full_n : IN STD_LOGIC;
        index_out_write : OUT STD_LOGIC;
        index : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component writemem IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_pMemPort_AWVALID : OUT STD_LOGIC;
        m_axi_pMemPort_AWREADY : IN STD_LOGIC;
        m_axi_pMemPort_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_pMemPort_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_pMemPort_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_pMemPort_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_pMemPort_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_pMemPort_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_pMemPort_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_pMemPort_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_pMemPort_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_pMemPort_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_pMemPort_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_pMemPort_WVALID : OUT STD_LOGIC;
        m_axi_pMemPort_WREADY : IN STD_LOGIC;
        m_axi_pMemPort_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_pMemPort_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_pMemPort_WLAST : OUT STD_LOGIC;
        m_axi_pMemPort_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_pMemPort_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_pMemPort_ARVALID : OUT STD_LOGIC;
        m_axi_pMemPort_ARREADY : IN STD_LOGIC;
        m_axi_pMemPort_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_pMemPort_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_pMemPort_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_pMemPort_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_pMemPort_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_pMemPort_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_pMemPort_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_pMemPort_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_pMemPort_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_pMemPort_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_pMemPort_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_pMemPort_RVALID : IN STD_LOGIC;
        m_axi_pMemPort_RREADY : OUT STD_LOGIC;
        m_axi_pMemPort_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_pMemPort_RLAST : IN STD_LOGIC;
        m_axi_pMemPort_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_pMemPort_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_pMemPort_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_pMemPort_BVALID : IN STD_LOGIC;
        m_axi_pMemPort_BREADY : OUT STD_LOGIC;
        m_axi_pMemPort_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_pMemPort_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_pMemPort_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        img_cols_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        img_cols_V_empty_n : IN STD_LOGIC;
        img_cols_V_read : OUT STD_LOGIC;
        row_dout : IN STD_LOGIC_VECTOR (30 downto 0);
        row_empty_n : IN STD_LOGIC;
        row_read : OUT STD_LOGIC;
        index_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        index_empty_n : IN STD_LOGIC;
        index_read : OUT STD_LOGIC;
        r_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        r_empty_n : IN STD_LOGIC;
        r_read : OUT STD_LOGIC;
        from_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        from_empty_n : IN STD_LOGIC;
        from_read : OUT STD_LOGIC;
        baseAddr_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
        baseAddr_ce0 : OUT STD_LOGIC;
        baseAddr_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fifo_w32_d480_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w32_d1_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w31_d1_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (30 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (30 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    Loop_0_proc56_U0 : component Loop_0_proc56
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => Loop_0_proc56_U0_ap_start,
        ap_done => Loop_0_proc56_U0_ap_done,
        ap_continue => Loop_0_proc56_U0_ap_continue,
        ap_idle => Loop_0_proc56_U0_ap_idle,
        ap_ready => Loop_0_proc56_U0_ap_ready,
        p_read => p_read,
        img_data_stream_0_V_dout => img_data_stream_0_V_dout,
        img_data_stream_0_V_empty_n => img_data_stream_0_V_empty_n,
        img_data_stream_0_V_read => Loop_0_proc56_U0_img_data_stream_0_V_read,
        img_data_stream_1_V_dout => img_data_stream_1_V_dout,
        img_data_stream_1_V_empty_n => img_data_stream_1_V_empty_n,
        img_data_stream_1_V_read => Loop_0_proc56_U0_img_data_stream_1_V_read,
        img_data_stream_2_V_dout => img_data_stream_2_V_dout,
        img_data_stream_2_V_empty_n => img_data_stream_2_V_empty_n,
        img_data_stream_2_V_read => Loop_0_proc56_U0_img_data_stream_2_V_read,
        cacheBuff1_i_din => Loop_0_proc56_U0_cacheBuff1_i_din,
        cacheBuff1_i_full_n => cacheBuff_full_n,
        cacheBuff1_i_write => Loop_0_proc56_U0_cacheBuff1_i_write,
        r => r,
        row => row,
        img_cols_V_out_din => Loop_0_proc56_U0_img_cols_V_out_din,
        img_cols_V_out_full_n => img_cols_V_c_full_n,
        img_cols_V_out_write => Loop_0_proc56_U0_img_cols_V_out_write,
        r_out_din => Loop_0_proc56_U0_r_out_din,
        r_out_full_n => r_c_full_n,
        r_out_write => Loop_0_proc56_U0_r_out_write,
        row_out_din => Loop_0_proc56_U0_row_out_din,
        row_out_full_n => row_c_full_n,
        row_out_write => Loop_0_proc56_U0_row_out_write,
        index_out_din => Loop_0_proc56_U0_index_out_din,
        index_out_full_n => index_c_full_n,
        index_out_write => Loop_0_proc56_U0_index_out_write,
        index => index);

    writemem_U0 : component writemem
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => writemem_U0_ap_start,
        ap_done => writemem_U0_ap_done,
        ap_continue => writemem_U0_ap_continue,
        ap_idle => writemem_U0_ap_idle,
        ap_ready => writemem_U0_ap_ready,
        m_axi_pMemPort_AWVALID => writemem_U0_m_axi_pMemPort_AWVALID,
        m_axi_pMemPort_AWREADY => m_axi_pMemPort_AWREADY,
        m_axi_pMemPort_AWADDR => writemem_U0_m_axi_pMemPort_AWADDR,
        m_axi_pMemPort_AWID => writemem_U0_m_axi_pMemPort_AWID,
        m_axi_pMemPort_AWLEN => writemem_U0_m_axi_pMemPort_AWLEN,
        m_axi_pMemPort_AWSIZE => writemem_U0_m_axi_pMemPort_AWSIZE,
        m_axi_pMemPort_AWBURST => writemem_U0_m_axi_pMemPort_AWBURST,
        m_axi_pMemPort_AWLOCK => writemem_U0_m_axi_pMemPort_AWLOCK,
        m_axi_pMemPort_AWCACHE => writemem_U0_m_axi_pMemPort_AWCACHE,
        m_axi_pMemPort_AWPROT => writemem_U0_m_axi_pMemPort_AWPROT,
        m_axi_pMemPort_AWQOS => writemem_U0_m_axi_pMemPort_AWQOS,
        m_axi_pMemPort_AWREGION => writemem_U0_m_axi_pMemPort_AWREGION,
        m_axi_pMemPort_AWUSER => writemem_U0_m_axi_pMemPort_AWUSER,
        m_axi_pMemPort_WVALID => writemem_U0_m_axi_pMemPort_WVALID,
        m_axi_pMemPort_WREADY => m_axi_pMemPort_WREADY,
        m_axi_pMemPort_WDATA => writemem_U0_m_axi_pMemPort_WDATA,
        m_axi_pMemPort_WSTRB => writemem_U0_m_axi_pMemPort_WSTRB,
        m_axi_pMemPort_WLAST => writemem_U0_m_axi_pMemPort_WLAST,
        m_axi_pMemPort_WID => writemem_U0_m_axi_pMemPort_WID,
        m_axi_pMemPort_WUSER => writemem_U0_m_axi_pMemPort_WUSER,
        m_axi_pMemPort_ARVALID => writemem_U0_m_axi_pMemPort_ARVALID,
        m_axi_pMemPort_ARREADY => ap_const_logic_0,
        m_axi_pMemPort_ARADDR => writemem_U0_m_axi_pMemPort_ARADDR,
        m_axi_pMemPort_ARID => writemem_U0_m_axi_pMemPort_ARID,
        m_axi_pMemPort_ARLEN => writemem_U0_m_axi_pMemPort_ARLEN,
        m_axi_pMemPort_ARSIZE => writemem_U0_m_axi_pMemPort_ARSIZE,
        m_axi_pMemPort_ARBURST => writemem_U0_m_axi_pMemPort_ARBURST,
        m_axi_pMemPort_ARLOCK => writemem_U0_m_axi_pMemPort_ARLOCK,
        m_axi_pMemPort_ARCACHE => writemem_U0_m_axi_pMemPort_ARCACHE,
        m_axi_pMemPort_ARPROT => writemem_U0_m_axi_pMemPort_ARPROT,
        m_axi_pMemPort_ARQOS => writemem_U0_m_axi_pMemPort_ARQOS,
        m_axi_pMemPort_ARREGION => writemem_U0_m_axi_pMemPort_ARREGION,
        m_axi_pMemPort_ARUSER => writemem_U0_m_axi_pMemPort_ARUSER,
        m_axi_pMemPort_RVALID => ap_const_logic_0,
        m_axi_pMemPort_RREADY => writemem_U0_m_axi_pMemPort_RREADY,
        m_axi_pMemPort_RDATA => ap_const_lv32_0,
        m_axi_pMemPort_RLAST => ap_const_logic_0,
        m_axi_pMemPort_RID => ap_const_lv1_0,
        m_axi_pMemPort_RUSER => ap_const_lv1_0,
        m_axi_pMemPort_RRESP => ap_const_lv2_0,
        m_axi_pMemPort_BVALID => m_axi_pMemPort_BVALID,
        m_axi_pMemPort_BREADY => writemem_U0_m_axi_pMemPort_BREADY,
        m_axi_pMemPort_BRESP => m_axi_pMemPort_BRESP,
        m_axi_pMemPort_BID => m_axi_pMemPort_BID,
        m_axi_pMemPort_BUSER => m_axi_pMemPort_BUSER,
        img_cols_V_dout => img_cols_V_c_dout,
        img_cols_V_empty_n => img_cols_V_c_empty_n,
        img_cols_V_read => writemem_U0_img_cols_V_read,
        row_dout => row_c_dout,
        row_empty_n => row_c_empty_n,
        row_read => writemem_U0_row_read,
        index_dout => index_c_dout,
        index_empty_n => index_c_empty_n,
        index_read => writemem_U0_index_read,
        r_dout => r_c_dout,
        r_empty_n => r_c_empty_n,
        r_read => writemem_U0_r_read,
        from_dout => cacheBuff_dout,
        from_empty_n => cacheBuff_empty_n,
        from_read => writemem_U0_from_read,
        baseAddr_address0 => writemem_U0_baseAddr_address0,
        baseAddr_ce0 => writemem_U0_baseAddr_ce0,
        baseAddr_q0 => baseAddr_q0);

    cacheBuff_U : component fifo_w32_d480_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Loop_0_proc56_U0_cacheBuff1_i_din,
        if_full_n => cacheBuff_full_n,
        if_write => Loop_0_proc56_U0_cacheBuff1_i_write,
        if_dout => cacheBuff_dout,
        if_empty_n => cacheBuff_empty_n,
        if_read => writemem_U0_from_read);

    img_cols_V_c_U : component fifo_w32_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Loop_0_proc56_U0_img_cols_V_out_din,
        if_full_n => img_cols_V_c_full_n,
        if_write => Loop_0_proc56_U0_img_cols_V_out_write,
        if_dout => img_cols_V_c_dout,
        if_empty_n => img_cols_V_c_empty_n,
        if_read => writemem_U0_img_cols_V_read);

    r_c_U : component fifo_w32_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Loop_0_proc56_U0_r_out_din,
        if_full_n => r_c_full_n,
        if_write => Loop_0_proc56_U0_r_out_write,
        if_dout => r_c_dout,
        if_empty_n => r_c_empty_n,
        if_read => writemem_U0_r_read);

    row_c_U : component fifo_w31_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Loop_0_proc56_U0_row_out_din,
        if_full_n => row_c_full_n,
        if_write => Loop_0_proc56_U0_row_out_write,
        if_dout => row_c_dout,
        if_empty_n => row_c_empty_n,
        if_read => writemem_U0_row_read);

    index_c_U : component fifo_w32_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Loop_0_proc56_U0_index_out_din,
        if_full_n => index_c_full_n,
        if_write => Loop_0_proc56_U0_index_out_write,
        if_dout => index_c_dout,
        if_empty_n => index_c_empty_n,
        if_read => writemem_U0_index_read);





    ap_sync_reg_Loop_0_proc56_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_Loop_0_proc56_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_Loop_0_proc56_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_Loop_0_proc56_U0_ap_ready <= ap_sync_Loop_0_proc56_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_writemem_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_writemem_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_writemem_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_writemem_U0_ap_ready <= ap_sync_writemem_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    Loop_0_proc56_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_0 = Loop_0_proc56_U0_ap_ready) and (ap_sync_ready = ap_const_logic_1))) then 
                Loop_0_proc56_U0_ap_ready_count <= std_logic_vector(unsigned(Loop_0_proc56_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_const_logic_1 = Loop_0_proc56_U0_ap_ready) and (ap_sync_ready = ap_const_logic_0))) then 
                Loop_0_proc56_U0_ap_ready_count <= std_logic_vector(unsigned(Loop_0_proc56_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;

    writemem_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((writemem_U0_ap_ready = ap_const_logic_0) and (ap_sync_ready = ap_const_logic_1))) then 
                writemem_U0_ap_ready_count <= std_logic_vector(unsigned(writemem_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_sync_ready = ap_const_logic_0) and (writemem_U0_ap_ready = ap_const_logic_1))) then 
                writemem_U0_ap_ready_count <= std_logic_vector(unsigned(writemem_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;
    Loop_0_proc56_U0_ap_continue <= ap_const_logic_1;
    Loop_0_proc56_U0_ap_start <= ((ap_sync_reg_Loop_0_proc56_U0_ap_ready xor ap_const_logic_1) and ap_start);
    Loop_0_proc56_U0_start_full_n <= ap_const_logic_1;
    Loop_0_proc56_U0_start_write <= ap_const_logic_0;
    ap_done <= writemem_U0_ap_done;
    ap_idle <= (writemem_U0_ap_idle and Loop_0_proc56_U0_ap_idle);
    ap_ready <= ap_sync_ready;
    ap_sync_Loop_0_proc56_U0_ap_ready <= (ap_sync_reg_Loop_0_proc56_U0_ap_ready or Loop_0_proc56_U0_ap_ready);
    ap_sync_continue <= ap_continue;
    ap_sync_done <= writemem_U0_ap_done;
    ap_sync_ready <= (ap_sync_writemem_U0_ap_ready and ap_sync_Loop_0_proc56_U0_ap_ready);
    ap_sync_writemem_U0_ap_ready <= (writemem_U0_ap_ready or ap_sync_reg_writemem_U0_ap_ready);
    baseAddr_address0 <= writemem_U0_baseAddr_address0;
    baseAddr_ce0 <= writemem_U0_baseAddr_ce0;
    baseAddr_d0 <= ap_const_lv32_0;
    baseAddr_we0 <= ap_const_logic_0;
    img_data_stream_0_V_read <= Loop_0_proc56_U0_img_data_stream_0_V_read;
    img_data_stream_1_V_read <= Loop_0_proc56_U0_img_data_stream_1_V_read;
    img_data_stream_2_V_read <= Loop_0_proc56_U0_img_data_stream_2_V_read;
    m_axi_pMemPort_ARADDR <= ap_const_lv32_0;
    m_axi_pMemPort_ARBURST <= ap_const_lv2_0;
    m_axi_pMemPort_ARCACHE <= ap_const_lv4_0;
    m_axi_pMemPort_ARID <= ap_const_lv1_0;
    m_axi_pMemPort_ARLEN <= ap_const_lv32_0;
    m_axi_pMemPort_ARLOCK <= ap_const_lv2_0;
    m_axi_pMemPort_ARPROT <= ap_const_lv3_0;
    m_axi_pMemPort_ARQOS <= ap_const_lv4_0;
    m_axi_pMemPort_ARREGION <= ap_const_lv4_0;
    m_axi_pMemPort_ARSIZE <= ap_const_lv3_0;
    m_axi_pMemPort_ARUSER <= ap_const_lv1_0;
    m_axi_pMemPort_ARVALID <= ap_const_logic_0;
    m_axi_pMemPort_AWADDR <= writemem_U0_m_axi_pMemPort_AWADDR;
    m_axi_pMemPort_AWBURST <= writemem_U0_m_axi_pMemPort_AWBURST;
    m_axi_pMemPort_AWCACHE <= writemem_U0_m_axi_pMemPort_AWCACHE;
    m_axi_pMemPort_AWID <= writemem_U0_m_axi_pMemPort_AWID;
    m_axi_pMemPort_AWLEN <= writemem_U0_m_axi_pMemPort_AWLEN;
    m_axi_pMemPort_AWLOCK <= writemem_U0_m_axi_pMemPort_AWLOCK;
    m_axi_pMemPort_AWPROT <= writemem_U0_m_axi_pMemPort_AWPROT;
    m_axi_pMemPort_AWQOS <= writemem_U0_m_axi_pMemPort_AWQOS;
    m_axi_pMemPort_AWREGION <= writemem_U0_m_axi_pMemPort_AWREGION;
    m_axi_pMemPort_AWSIZE <= writemem_U0_m_axi_pMemPort_AWSIZE;
    m_axi_pMemPort_AWUSER <= writemem_U0_m_axi_pMemPort_AWUSER;
    m_axi_pMemPort_AWVALID <= writemem_U0_m_axi_pMemPort_AWVALID;
    m_axi_pMemPort_BREADY <= writemem_U0_m_axi_pMemPort_BREADY;
    m_axi_pMemPort_RREADY <= ap_const_logic_0;
    m_axi_pMemPort_WDATA <= writemem_U0_m_axi_pMemPort_WDATA;
    m_axi_pMemPort_WID <= writemem_U0_m_axi_pMemPort_WID;
    m_axi_pMemPort_WLAST <= writemem_U0_m_axi_pMemPort_WLAST;
    m_axi_pMemPort_WSTRB <= writemem_U0_m_axi_pMemPort_WSTRB;
    m_axi_pMemPort_WUSER <= writemem_U0_m_axi_pMemPort_WUSER;
    m_axi_pMemPort_WVALID <= writemem_U0_m_axi_pMemPort_WVALID;
    writemem_U0_ap_continue <= ap_continue;
    writemem_U0_ap_start <= ((ap_sync_reg_writemem_U0_ap_ready xor ap_const_logic_1) and ap_start);
    writemem_U0_start_full_n <= ap_const_logic_1;
    writemem_U0_start_write <= ap_const_logic_0;
end behav;
