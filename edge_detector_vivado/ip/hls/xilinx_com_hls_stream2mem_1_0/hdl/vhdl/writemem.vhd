-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity writemem is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_pMemPort_AWVALID : OUT STD_LOGIC;
    m_axi_pMemPort_AWREADY : IN STD_LOGIC;
    m_axi_pMemPort_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_pMemPort_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_pMemPort_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_pMemPort_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_pMemPort_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_pMemPort_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_pMemPort_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_pMemPort_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_pMemPort_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_pMemPort_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_pMemPort_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_pMemPort_WVALID : OUT STD_LOGIC;
    m_axi_pMemPort_WREADY : IN STD_LOGIC;
    m_axi_pMemPort_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_pMemPort_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_pMemPort_WLAST : OUT STD_LOGIC;
    m_axi_pMemPort_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_pMemPort_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_pMemPort_ARVALID : OUT STD_LOGIC;
    m_axi_pMemPort_ARREADY : IN STD_LOGIC;
    m_axi_pMemPort_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_pMemPort_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_pMemPort_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_pMemPort_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_pMemPort_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_pMemPort_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_pMemPort_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_pMemPort_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_pMemPort_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_pMemPort_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_pMemPort_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_pMemPort_RVALID : IN STD_LOGIC;
    m_axi_pMemPort_RREADY : OUT STD_LOGIC;
    m_axi_pMemPort_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_pMemPort_RLAST : IN STD_LOGIC;
    m_axi_pMemPort_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_pMemPort_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_pMemPort_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_pMemPort_BVALID : IN STD_LOGIC;
    m_axi_pMemPort_BREADY : OUT STD_LOGIC;
    m_axi_pMemPort_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_pMemPort_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_pMemPort_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    img_cols_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    img_cols_V_empty_n : IN STD_LOGIC;
    img_cols_V_read : OUT STD_LOGIC;
    row_dout : IN STD_LOGIC_VECTOR (30 downto 0);
    row_empty_n : IN STD_LOGIC;
    row_read : OUT STD_LOGIC;
    index_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    index_empty_n : IN STD_LOGIC;
    index_read : OUT STD_LOGIC;
    r_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    r_empty_n : IN STD_LOGIC;
    r_read : OUT STD_LOGIC;
    from_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    from_empty_n : IN STD_LOGIC;
    from_read : OUT STD_LOGIC;
    baseAddr_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    baseAddr_ce0 : OUT STD_LOGIC;
    baseAddr_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of writemem is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv29_0 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv29_1 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000001";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal pMemPort_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal pMemPort_blk_n_W : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal exitcond_i_i_reg_451 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter1_exitcond_i_i_reg_451 : STD_LOGIC_VECTOR (0 downto 0);
    signal pMemPort_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal tmp_i1_i_reg_441 : STD_LOGIC_VECTOR (0 downto 0);
    signal img_cols_V_blk_n : STD_LOGIC;
    signal row_blk_n : STD_LOGIC;
    signal index_blk_n : STD_LOGIC;
    signal r_blk_n : STD_LOGIC;
    signal from_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal indvar_i_i_reg_213 : STD_LOGIC_VECTOR (28 downto 0);
    signal row_read_reg_379 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal r_read_reg_384 : STD_LOGIC_VECTOR (31 downto 0);
    signal line_len_i_i_reg_389 : STD_LOGIC_VECTOR (31 downto 0);
    signal index_read_reg_394 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_fu_266_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_reg_399 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_i_i_fu_272_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_i_i_reg_404 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_reg_409 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal n_1_i_i_fu_307_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal n_1_i_i_reg_421 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_291_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_i_i_reg_426 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal to_assign_fu_332_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal to_assign_reg_436 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_i1_i_fu_344_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_ioackin_m_axi_pMemPort_AWREADY : STD_LOGIC;
    signal exitcond_i_i_fu_368_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state6_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter2 : BOOLEAN;
    signal ap_sig_ioackin_m_axi_pMemPort_WREADY : STD_LOGIC;
    signal ap_block_state8_io : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal indvar_next_i_i_fu_373_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal from_read_reg_460 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state6 : STD_LOGIC;
    signal tmp_5_i_i_fu_314_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_i2_i_fu_350_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_m_axi_pMemPort_AWREADY : STD_LOGIC := '0';
    signal ap_block_state13 : BOOLEAN;
    signal ap_reg_ioackin_m_axi_pMemPort_WREADY : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal p_shl_i_i_fu_224_p3 : STD_LOGIC_VECTOR (33 downto 0);
    signal p_shl_cast_i_i_fu_232_p1 : STD_LOGIC_VECTOR (34 downto 0);
    signal lhs_V_cast111_i_i_fu_236_p1 : STD_LOGIC_VECTOR (34 downto 0);
    signal r_V_i_i_fu_240_p2 : STD_LOGIC_VECTOR (34 downto 0);
    signal tmp_3_fu_256_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_291_p0 : STD_LOGIC_VECTOR (30 downto 0);
    signal n_i_i_fu_296_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_i_fu_302_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_i_i_fu_318_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_fu_328_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal len_assign_fu_337_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_cast_i_i_fu_364_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_291_p00 : STD_LOGIC_VECTOR (31 downto 0);

    component stream2mem_mul_31bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (30 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    stream2mem_mul_31bkb_U33 : component stream2mem_mul_31bkb
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 31,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_291_p0,
        din1 => line_len_i_i_reg_389,
        ce => ap_const_logic_1,
        dout => grp_fu_291_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((m_axi_pMemPort_BVALID = ap_const_logic_0) and (tmp_i1_i_reg_441 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_sig_ioackin_m_axi_pMemPort_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state6)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state6);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((ap_sig_ioackin_m_axi_pMemPort_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_axi_pMemPort_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_pMemPort_AWREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                    if ((ap_sig_ioackin_m_axi_pMemPort_AWREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_m_axi_pMemPort_AWREADY <= ap_const_logic_0;
                    elsif ((m_axi_pMemPort_AWREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_m_axi_pMemPort_AWREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_axi_pMemPort_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_pMemPort_WREADY <= ap_const_logic_0;
            else
                if (((ap_reg_pp0_iter1_exitcond_i_i_reg_451 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                    if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then 
                        ap_reg_ioackin_m_axi_pMemPort_WREADY <= ap_const_logic_0;
                    elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (m_axi_pMemPort_WREADY = ap_const_logic_1))) then 
                        ap_reg_ioackin_m_axi_pMemPort_WREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    indvar_i_i_reg_213_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i_i_fu_368_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_i_i_reg_213 <= indvar_next_i_i_fu_373_p2;
            elsif (((ap_sig_ioackin_m_axi_pMemPort_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                indvar_i_i_reg_213 <= ap_const_lv29_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_reg_pp0_iter1_exitcond_i_i_reg_451 <= exitcond_i_i_reg_451;
                exitcond_i_i_reg_451 <= exitcond_i_i_fu_368_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i_i_reg_451 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                from_read_reg_460 <= from_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((index_empty_n = ap_const_logic_0) or (row_empty_n = ap_const_logic_0) or (img_cols_V_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (r_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                icmp_reg_399 <= icmp_fu_266_p2;
                index_read_reg_394 <= index_dout;
                line_len_i_i_reg_389 <= r_V_i_i_fu_240_p2(33 downto 2);
                r_read_reg_384 <= r_dout;
                row_read_reg_379 <= row_dout;
                tmp_1_reg_409 <= r_V_i_i_fu_240_p2(31 downto 2);
                tmp_9_i_i_reg_404 <= tmp_9_i_i_fu_272_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                n_1_i_i_reg_421 <= n_1_i_i_fu_307_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                tmp_7_i_i_reg_426 <= grp_fu_291_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                tmp_i1_i_reg_441 <= tmp_i1_i_fu_344_p2;
                to_assign_reg_436 <= to_assign_fu_332_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, m_axi_pMemPort_BVALID, img_cols_V_empty_n, row_empty_n, index_empty_n, r_empty_n, ap_CS_fsm_state5, ap_enable_reg_pp0_iter2, ap_CS_fsm_state13, tmp_i1_i_reg_441, ap_enable_reg_pp0_iter1, ap_CS_fsm_state4, tmp_i1_i_fu_344_p2, ap_sig_ioackin_m_axi_pMemPort_AWREADY, exitcond_i_i_fu_368_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((index_empty_n = ap_const_logic_0) or (row_empty_n = ap_const_logic_0) or (img_cols_V_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (r_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((tmp_i1_i_fu_344_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_sig_ioackin_m_axi_pMemPort_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (exitcond_i_i_fu_368_p2 = ap_const_lv1_1))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (exitcond_i_i_fu_368_p2 = ap_const_lv1_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                if ((not(((m_axi_pMemPort_BVALID = ap_const_logic_0) and (tmp_i1_i_reg_441 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(5);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state13 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(from_empty_n, exitcond_i_i_reg_451, ap_enable_reg_pp0_iter1)
    begin
                ap_block_pp0_stage0_01001 <= ((exitcond_i_i_reg_451 = ap_const_lv1_0) and (from_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(from_empty_n, ap_enable_reg_pp0_iter2, exitcond_i_i_reg_451, ap_enable_reg_pp0_iter1, ap_block_state8_io)
    begin
                ap_block_pp0_stage0_11001 <= (((exitcond_i_i_reg_451 = ap_const_lv1_0) and (from_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state8_io) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(from_empty_n, ap_enable_reg_pp0_iter2, exitcond_i_i_reg_451, ap_enable_reg_pp0_iter1, ap_block_state8_io)
    begin
                ap_block_pp0_stage0_subdone <= (((exitcond_i_i_reg_451 = ap_const_lv1_0) and (from_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state8_io) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, img_cols_V_empty_n, row_empty_n, index_empty_n, r_empty_n)
    begin
                ap_block_state1 <= ((index_empty_n = ap_const_logic_0) or (row_empty_n = ap_const_logic_0) or (img_cols_V_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (r_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state13_assign_proc : process(m_axi_pMemPort_BVALID, tmp_i1_i_reg_441)
    begin
                ap_block_state13 <= ((m_axi_pMemPort_BVALID = ap_const_logic_0) and (tmp_i1_i_reg_441 = ap_const_lv1_1));
    end process;

        ap_block_state6_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state7_pp0_stage0_iter1_assign_proc : process(from_empty_n, exitcond_i_i_reg_451)
    begin
                ap_block_state7_pp0_stage0_iter1 <= ((exitcond_i_i_reg_451 = ap_const_lv1_0) and (from_empty_n = ap_const_logic_0));
    end process;


    ap_block_state8_io_assign_proc : process(ap_reg_pp0_iter1_exitcond_i_i_reg_451, ap_sig_ioackin_m_axi_pMemPort_WREADY)
    begin
                ap_block_state8_io <= ((ap_reg_pp0_iter1_exitcond_i_i_reg_451 = ap_const_lv1_0) and (ap_sig_ioackin_m_axi_pMemPort_WREADY = ap_const_logic_0));
    end process;

        ap_block_state8_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state6_assign_proc : process(exitcond_i_i_fu_368_p2)
    begin
        if ((exitcond_i_i_fu_368_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state6 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, m_axi_pMemPort_BVALID, ap_CS_fsm_state13, tmp_i1_i_reg_441)
    begin
        if ((not(((m_axi_pMemPort_BVALID = ap_const_logic_0) and (tmp_i1_i_reg_441 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(m_axi_pMemPort_BVALID, ap_CS_fsm_state13, tmp_i1_i_reg_441)
    begin
        if ((not(((m_axi_pMemPort_BVALID = ap_const_logic_0) and (tmp_i1_i_reg_441 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_ioackin_m_axi_pMemPort_AWREADY_assign_proc : process(m_axi_pMemPort_AWREADY, ap_reg_ioackin_m_axi_pMemPort_AWREADY)
    begin
        if ((ap_reg_ioackin_m_axi_pMemPort_AWREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_m_axi_pMemPort_AWREADY <= m_axi_pMemPort_AWREADY;
        else 
            ap_sig_ioackin_m_axi_pMemPort_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_m_axi_pMemPort_WREADY_assign_proc : process(m_axi_pMemPort_WREADY, ap_reg_ioackin_m_axi_pMemPort_WREADY)
    begin
        if ((ap_reg_ioackin_m_axi_pMemPort_WREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_m_axi_pMemPort_WREADY <= m_axi_pMemPort_WREADY;
        else 
            ap_sig_ioackin_m_axi_pMemPort_WREADY <= ap_const_logic_1;
        end if; 
    end process;

    baseAddr_address0 <= tmp_5_i_i_fu_314_p1(2 - 1 downto 0);

    baseAddr_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            baseAddr_ce0 <= ap_const_logic_1;
        else 
            baseAddr_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_i_i_fu_368_p2 <= "1" when (indvar_cast_i_i_fu_364_p1 = tmp_1_reg_409) else "0";

    from_blk_n_assign_proc : process(from_empty_n, ap_block_pp0_stage0, exitcond_i_i_reg_451, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1)
    begin
        if (((exitcond_i_i_reg_451 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            from_blk_n <= from_empty_n;
        else 
            from_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    from_read_assign_proc : process(exitcond_i_i_reg_451, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond_i_i_reg_451 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            from_read <= ap_const_logic_1;
        else 
            from_read <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_291_p0 <= grp_fu_291_p00(31 - 1 downto 0);
    grp_fu_291_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(row_read_reg_379),32));
    icmp_fu_266_p2 <= "1" when (signed(tmp_3_fu_256_p4) < signed(ap_const_lv31_1)) else "0";

    img_cols_V_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, img_cols_V_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            img_cols_V_blk_n <= img_cols_V_empty_n;
        else 
            img_cols_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    img_cols_V_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, img_cols_V_empty_n, row_empty_n, index_empty_n, r_empty_n)
    begin
        if ((not(((index_empty_n = ap_const_logic_0) or (row_empty_n = ap_const_logic_0) or (img_cols_V_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (r_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            img_cols_V_read <= ap_const_logic_1;
        else 
            img_cols_V_read <= ap_const_logic_0;
        end if; 
    end process;


    index_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, index_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            index_blk_n <= index_empty_n;
        else 
            index_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    index_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, img_cols_V_empty_n, row_empty_n, index_empty_n, r_empty_n)
    begin
        if ((not(((index_empty_n = ap_const_logic_0) or (row_empty_n = ap_const_logic_0) or (img_cols_V_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (r_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            index_read <= ap_const_logic_1;
        else 
            index_read <= ap_const_logic_0;
        end if; 
    end process;

    indvar_cast_i_i_fu_364_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(indvar_i_i_reg_213),30));
    indvar_next_i_i_fu_373_p2 <= std_logic_vector(unsigned(indvar_i_i_reg_213) + unsigned(ap_const_lv29_1));
    len_assign_fu_337_p3 <= (tmp_1_reg_409 & ap_const_lv2_0);
    lhs_V_cast111_i_i_fu_236_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(img_cols_V_dout),35));
    m_axi_pMemPort_ARADDR <= ap_const_lv32_0;
    m_axi_pMemPort_ARBURST <= ap_const_lv2_0;
    m_axi_pMemPort_ARCACHE <= ap_const_lv4_0;
    m_axi_pMemPort_ARID <= ap_const_lv1_0;
    m_axi_pMemPort_ARLEN <= ap_const_lv32_0;
    m_axi_pMemPort_ARLOCK <= ap_const_lv2_0;
    m_axi_pMemPort_ARPROT <= ap_const_lv3_0;
    m_axi_pMemPort_ARQOS <= ap_const_lv4_0;
    m_axi_pMemPort_ARREGION <= ap_const_lv4_0;
    m_axi_pMemPort_ARSIZE <= ap_const_lv3_0;
    m_axi_pMemPort_ARUSER <= ap_const_lv1_0;
    m_axi_pMemPort_ARVALID <= ap_const_logic_0;
    m_axi_pMemPort_AWADDR <= tmp_1_i2_i_fu_350_p1(32 - 1 downto 0);
    m_axi_pMemPort_AWBURST <= ap_const_lv2_0;
    m_axi_pMemPort_AWCACHE <= ap_const_lv4_0;
    m_axi_pMemPort_AWID <= ap_const_lv1_0;
    m_axi_pMemPort_AWLEN <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_reg_409),32));
    m_axi_pMemPort_AWLOCK <= ap_const_lv2_0;
    m_axi_pMemPort_AWPROT <= ap_const_lv3_0;
    m_axi_pMemPort_AWQOS <= ap_const_lv4_0;
    m_axi_pMemPort_AWREGION <= ap_const_lv4_0;
    m_axi_pMemPort_AWSIZE <= ap_const_lv3_0;
    m_axi_pMemPort_AWUSER <= ap_const_lv1_0;

    m_axi_pMemPort_AWVALID_assign_proc : process(ap_CS_fsm_state5, ap_reg_ioackin_m_axi_pMemPort_AWREADY)
    begin
        if (((ap_reg_ioackin_m_axi_pMemPort_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            m_axi_pMemPort_AWVALID <= ap_const_logic_1;
        else 
            m_axi_pMemPort_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_pMemPort_BREADY_assign_proc : process(m_axi_pMemPort_BVALID, ap_CS_fsm_state13, tmp_i1_i_reg_441)
    begin
        if ((not(((m_axi_pMemPort_BVALID = ap_const_logic_0) and (tmp_i1_i_reg_441 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state13) and (tmp_i1_i_reg_441 = ap_const_lv1_1))) then 
            m_axi_pMemPort_BREADY <= ap_const_logic_1;
        else 
            m_axi_pMemPort_BREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_pMemPort_RREADY <= ap_const_logic_0;
    m_axi_pMemPort_WDATA <= from_read_reg_460;
    m_axi_pMemPort_WID <= ap_const_lv1_0;
    m_axi_pMemPort_WLAST <= ap_const_logic_0;
    m_axi_pMemPort_WSTRB <= ap_const_lv4_F;
    m_axi_pMemPort_WUSER <= ap_const_lv1_0;

    m_axi_pMemPort_WVALID_assign_proc : process(ap_enable_reg_pp0_iter2, ap_reg_pp0_iter1_exitcond_i_i_reg_451, ap_reg_ioackin_m_axi_pMemPort_WREADY, ap_block_pp0_stage0_01001)
    begin
        if (((ap_reg_pp0_iter1_exitcond_i_i_reg_451 = ap_const_lv1_0) and (ap_reg_ioackin_m_axi_pMemPort_WREADY = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            m_axi_pMemPort_WVALID <= ap_const_logic_1;
        else 
            m_axi_pMemPort_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    n_1_i_i_fu_307_p3 <= 
        index_read_reg_394 when (tmp_i_i_fu_302_p2(0) = '1') else 
        n_i_i_fu_296_p3;
    n_i_i_fu_296_p3 <= 
        tmp_9_i_i_reg_404 when (icmp_reg_399(0) = '1') else 
        ap_const_lv32_0;

    pMemPort_blk_n_AW_assign_proc : process(m_axi_pMemPort_AWREADY, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            pMemPort_blk_n_AW <= m_axi_pMemPort_AWREADY;
        else 
            pMemPort_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    pMemPort_blk_n_B_assign_proc : process(m_axi_pMemPort_BVALID, ap_CS_fsm_state13, tmp_i1_i_reg_441)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) and (tmp_i1_i_reg_441 = ap_const_lv1_1))) then 
            pMemPort_blk_n_B <= m_axi_pMemPort_BVALID;
        else 
            pMemPort_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    pMemPort_blk_n_W_assign_proc : process(m_axi_pMemPort_WREADY, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, ap_reg_pp0_iter1_exitcond_i_i_reg_451)
    begin
        if (((ap_reg_pp0_iter1_exitcond_i_i_reg_451 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            pMemPort_blk_n_W <= m_axi_pMemPort_WREADY;
        else 
            pMemPort_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    p_shl_cast_i_i_fu_232_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_i_i_fu_224_p3),35));
    p_shl_i_i_fu_224_p3 <= (img_cols_V_dout & ap_const_lv2_0);
    r_V_i_i_fu_240_p2 <= std_logic_vector(unsigned(p_shl_cast_i_i_fu_232_p1) - unsigned(lhs_V_cast111_i_i_fu_236_p1));

    r_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, r_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            r_blk_n <= r_empty_n;
        else 
            r_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    r_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, img_cols_V_empty_n, row_empty_n, index_empty_n, r_empty_n)
    begin
        if ((not(((index_empty_n = ap_const_logic_0) or (row_empty_n = ap_const_logic_0) or (img_cols_V_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (r_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            r_read <= ap_const_logic_1;
        else 
            r_read <= ap_const_logic_0;
        end if; 
    end process;


    row_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, row_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            row_blk_n <= row_empty_n;
        else 
            row_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    row_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, img_cols_V_empty_n, row_empty_n, index_empty_n, r_empty_n)
    begin
        if ((not(((index_empty_n = ap_const_logic_0) or (row_empty_n = ap_const_logic_0) or (img_cols_V_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (r_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            row_read <= ap_const_logic_1;
        else 
            row_read <= ap_const_logic_0;
        end if; 
    end process;

    tmp_1_i2_i_fu_350_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(to_assign_reg_436),64));
    tmp_3_fu_256_p4 <= index_dout(31 downto 1);
        tmp_5_i_i_fu_314_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(n_1_i_i_reg_421),64));

    tmp_6_i_i_fu_318_p4 <= baseAddr_q0(31 downto 2);
    tmp_9_i_i_fu_272_p2 <= std_logic_vector(unsigned(index_dout) + unsigned(ap_const_lv32_1));
    tmp_fu_328_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_i_i_fu_318_p4),32));
    tmp_i1_i_fu_344_p2 <= "1" when (signed(len_assign_fu_337_p3) > signed(ap_const_lv32_0)) else "0";
    tmp_i_i_fu_302_p2 <= "1" when (n_i_i_fu_296_p3 = r_read_reg_384) else "0";
    to_assign_fu_332_p2 <= std_logic_vector(unsigned(tmp_7_i_i_reg_426) + unsigned(tmp_fu_328_p1));
end behav;
