-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity stream2mem is
generic (
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_PMEMPORT_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_PMEMPORT_ID_WIDTH : INTEGER := 1;
    C_M_AXI_PMEMPORT_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_PMEMPORT_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_PMEMPORT_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_PMEMPORT_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_PMEMPORT_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_PMEMPORT_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_PMEMPORT_TARGET_ADDR : INTEGER := 0;
    C_M_AXI_PMEMPORT_USER_VALUE : INTEGER := 0;
    C_M_AXI_PMEMPORT_PROT_VALUE : INTEGER := 0;
    C_M_AXI_PMEMPORT_CACHE_VALUE : INTEGER := 3 );
port (
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_pMemPort_AWVALID : OUT STD_LOGIC;
    m_axi_pMemPort_AWREADY : IN STD_LOGIC;
    m_axi_pMemPort_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_PMEMPORT_ADDR_WIDTH-1 downto 0);
    m_axi_pMemPort_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_PMEMPORT_ID_WIDTH-1 downto 0);
    m_axi_pMemPort_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_pMemPort_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_pMemPort_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_pMemPort_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_pMemPort_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_pMemPort_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_pMemPort_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_pMemPort_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_pMemPort_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_PMEMPORT_AWUSER_WIDTH-1 downto 0);
    m_axi_pMemPort_WVALID : OUT STD_LOGIC;
    m_axi_pMemPort_WREADY : IN STD_LOGIC;
    m_axi_pMemPort_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_PMEMPORT_DATA_WIDTH-1 downto 0);
    m_axi_pMemPort_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_PMEMPORT_DATA_WIDTH/8-1 downto 0);
    m_axi_pMemPort_WLAST : OUT STD_LOGIC;
    m_axi_pMemPort_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_PMEMPORT_ID_WIDTH-1 downto 0);
    m_axi_pMemPort_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_PMEMPORT_WUSER_WIDTH-1 downto 0);
    m_axi_pMemPort_ARVALID : OUT STD_LOGIC;
    m_axi_pMemPort_ARREADY : IN STD_LOGIC;
    m_axi_pMemPort_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_PMEMPORT_ADDR_WIDTH-1 downto 0);
    m_axi_pMemPort_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_PMEMPORT_ID_WIDTH-1 downto 0);
    m_axi_pMemPort_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_pMemPort_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_pMemPort_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_pMemPort_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_pMemPort_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_pMemPort_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_pMemPort_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_pMemPort_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_pMemPort_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_PMEMPORT_ARUSER_WIDTH-1 downto 0);
    m_axi_pMemPort_RVALID : IN STD_LOGIC;
    m_axi_pMemPort_RREADY : OUT STD_LOGIC;
    m_axi_pMemPort_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_PMEMPORT_DATA_WIDTH-1 downto 0);
    m_axi_pMemPort_RLAST : IN STD_LOGIC;
    m_axi_pMemPort_RID : IN STD_LOGIC_VECTOR (C_M_AXI_PMEMPORT_ID_WIDTH-1 downto 0);
    m_axi_pMemPort_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_PMEMPORT_RUSER_WIDTH-1 downto 0);
    m_axi_pMemPort_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_pMemPort_BVALID : IN STD_LOGIC;
    m_axi_pMemPort_BREADY : OUT STD_LOGIC;
    m_axi_pMemPort_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_pMemPort_BID : IN STD_LOGIC_VECTOR (C_M_AXI_PMEMPORT_ID_WIDTH-1 downto 0);
    m_axi_pMemPort_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_PMEMPORT_BUSER_WIDTH-1 downto 0);
    vstream_TDATA : IN STD_LOGIC_VECTOR (23 downto 0);
    vstream_TKEEP : IN STD_LOGIC_VECTOR (2 downto 0);
    vstream_TSTRB : IN STD_LOGIC_VECTOR (2 downto 0);
    vstream_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    vstream_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    vstream_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    vstream_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    indexw : OUT STD_LOGIC_VECTOR (31 downto 0);
    indexr : IN STD_LOGIC_VECTOR (31 downto 0);
    vstream_TVALID : IN STD_LOGIC;
    vstream_TREADY : OUT STD_LOGIC );
end;


architecture behav of stream2mem is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "stream2mem,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z035ffg676-2,HLS_INPUT_CLOCK=6.666600,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=5.833275,HLS_SYN_LAT=-1,HLS_SYN_TPT=-1,HLS_SYN_MEM=6,HLS_SYN_DSP=4,HLS_SYN_FF=1958,HLS_SYN_LUT=3435}";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_S_AXI_WSTRB_WIDTH : INTEGER range 63 downto 0 := 4;
    constant C_S_AXI_ADDR_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant C_M_AXI_ID_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_ADDR_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_WSTRB_WIDTH : INTEGER range 63 downto 0 := 4;
    constant C_M_AXI_AWUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_ARUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_WUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_RUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_BUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";

    signal ap_rst_n_inv : STD_LOGIC;
    signal rows : STD_LOGIC_VECTOR (31 downto 0);
    signal cols : STD_LOGIC_VECTOR (31 downto 0);
    signal baseAddr_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal pMemPort_AWREADY : STD_LOGIC;
    signal pMemPort_WREADY : STD_LOGIC;
    signal pMemPort_ARREADY : STD_LOGIC;
    signal pMemPort_RVALID : STD_LOGIC;
    signal pMemPort_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal pMemPort_RLAST : STD_LOGIC;
    signal pMemPort_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal pMemPort_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal pMemPort_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal pMemPort_BVALID : STD_LOGIC;
    signal pMemPort_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal pMemPort_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal pMemPort_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal Block_Mat_exit3_proc_U0_ap_start : STD_LOGIC;
    signal Block_Mat_exit3_proc_U0_ap_done : STD_LOGIC;
    signal Block_Mat_exit3_proc_U0_ap_continue : STD_LOGIC;
    signal Block_Mat_exit3_proc_U0_ap_idle : STD_LOGIC;
    signal Block_Mat_exit3_proc_U0_ap_ready : STD_LOGIC;
    signal Block_Mat_exit3_proc_U0_img_rows_V_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_Mat_exit3_proc_U0_img_rows_V_out_write : STD_LOGIC;
    signal Block_Mat_exit3_proc_U0_img_cols_V_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_Mat_exit3_proc_U0_img_cols_V_out_write : STD_LOGIC;
    signal Block_Mat_exit3_proc_U0_indexr_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_Mat_exit3_proc_U0_indexr_out_write : STD_LOGIC;
    signal AXIvideo2Mat_U0_ap_start : STD_LOGIC;
    signal AXIvideo2Mat_U0_ap_done : STD_LOGIC;
    signal AXIvideo2Mat_U0_ap_continue : STD_LOGIC;
    signal AXIvideo2Mat_U0_ap_idle : STD_LOGIC;
    signal AXIvideo2Mat_U0_ap_ready : STD_LOGIC;
    signal AXIvideo2Mat_U0_vstream_TREADY : STD_LOGIC;
    signal AXIvideo2Mat_U0_img_rows_V_read : STD_LOGIC;
    signal AXIvideo2Mat_U0_img_cols_V_read : STD_LOGIC;
    signal AXIvideo2Mat_U0_img_data_stream_0_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal AXIvideo2Mat_U0_img_data_stream_0_V_write : STD_LOGIC;
    signal AXIvideo2Mat_U0_img_data_stream_1_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal AXIvideo2Mat_U0_img_data_stream_1_V_write : STD_LOGIC;
    signal AXIvideo2Mat_U0_img_data_stream_2_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal AXIvideo2Mat_U0_img_data_stream_2_V_write : STD_LOGIC;
    signal AXIvideo2Mat_U0_img_rows_V_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal AXIvideo2Mat_U0_img_rows_V_out_write : STD_LOGIC;
    signal AXIvideo2Mat_U0_img_cols_V_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal AXIvideo2Mat_U0_img_cols_V_out_write : STD_LOGIC;
    signal mat2mem_U0_ap_start : STD_LOGIC;
    signal mat2mem_U0_ap_done : STD_LOGIC;
    signal mat2mem_U0_ap_continue : STD_LOGIC;
    signal mat2mem_U0_ap_idle : STD_LOGIC;
    signal mat2mem_U0_ap_ready : STD_LOGIC;
    signal mat2mem_U0_img_rows_V_read : STD_LOGIC;
    signal mat2mem_U0_img_cols_V_read : STD_LOGIC;
    signal mat2mem_U0_img_data_stream_0_V_read : STD_LOGIC;
    signal mat2mem_U0_img_data_stream_1_V_read : STD_LOGIC;
    signal mat2mem_U0_img_data_stream_2_V_read : STD_LOGIC;
    signal mat2mem_U0_m_axi_pMemPort_AWVALID : STD_LOGIC;
    signal mat2mem_U0_m_axi_pMemPort_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal mat2mem_U0_m_axi_pMemPort_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal mat2mem_U0_m_axi_pMemPort_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal mat2mem_U0_m_axi_pMemPort_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal mat2mem_U0_m_axi_pMemPort_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal mat2mem_U0_m_axi_pMemPort_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal mat2mem_U0_m_axi_pMemPort_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal mat2mem_U0_m_axi_pMemPort_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal mat2mem_U0_m_axi_pMemPort_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal mat2mem_U0_m_axi_pMemPort_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal mat2mem_U0_m_axi_pMemPort_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal mat2mem_U0_m_axi_pMemPort_WVALID : STD_LOGIC;
    signal mat2mem_U0_m_axi_pMemPort_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal mat2mem_U0_m_axi_pMemPort_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal mat2mem_U0_m_axi_pMemPort_WLAST : STD_LOGIC;
    signal mat2mem_U0_m_axi_pMemPort_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal mat2mem_U0_m_axi_pMemPort_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal mat2mem_U0_m_axi_pMemPort_ARVALID : STD_LOGIC;
    signal mat2mem_U0_m_axi_pMemPort_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal mat2mem_U0_m_axi_pMemPort_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal mat2mem_U0_m_axi_pMemPort_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal mat2mem_U0_m_axi_pMemPort_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal mat2mem_U0_m_axi_pMemPort_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal mat2mem_U0_m_axi_pMemPort_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal mat2mem_U0_m_axi_pMemPort_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal mat2mem_U0_m_axi_pMemPort_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal mat2mem_U0_m_axi_pMemPort_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal mat2mem_U0_m_axi_pMemPort_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal mat2mem_U0_m_axi_pMemPort_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal mat2mem_U0_m_axi_pMemPort_RREADY : STD_LOGIC;
    signal mat2mem_U0_m_axi_pMemPort_BREADY : STD_LOGIC;
    signal mat2mem_U0_w : STD_LOGIC_VECTOR (31 downto 0);
    signal mat2mem_U0_w_ap_vld : STD_LOGIC;
    signal mat2mem_U0_r_read : STD_LOGIC;
    signal mat2mem_U0_baseAddr_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal mat2mem_U0_baseAddr_ce0 : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal img_rows_V_c_full_n : STD_LOGIC;
    signal img_rows_V_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal img_rows_V_c_empty_n : STD_LOGIC;
    signal img_cols_V_c_full_n : STD_LOGIC;
    signal img_cols_V_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal img_cols_V_c_empty_n : STD_LOGIC;
    signal indexr_c_full_n : STD_LOGIC;
    signal indexr_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal indexr_c_empty_n : STD_LOGIC;
    signal img_data_stream_0_V_full_n : STD_LOGIC;
    signal img_data_stream_0_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_data_stream_0_V_empty_n : STD_LOGIC;
    signal img_data_stream_1_V_full_n : STD_LOGIC;
    signal img_data_stream_1_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_data_stream_1_V_empty_n : STD_LOGIC;
    signal img_data_stream_2_V_full_n : STD_LOGIC;
    signal img_data_stream_2_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_data_stream_2_V_empty_n : STD_LOGIC;
    signal img_rows_V_c9_full_n : STD_LOGIC;
    signal img_rows_V_c9_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal img_rows_V_c9_empty_n : STD_LOGIC;
    signal img_cols_V_c10_full_n : STD_LOGIC;
    signal img_cols_V_c10_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal img_cols_V_c10_empty_n : STD_LOGIC;
    signal Block_Mat_exit3_proc_U0_start_full_n : STD_LOGIC;
    signal Block_Mat_exit3_proc_U0_start_write : STD_LOGIC;
    signal AXIvideo2Mat_U0_start_full_n : STD_LOGIC;
    signal AXIvideo2Mat_U0_start_write : STD_LOGIC;
    signal mat2mem_U0_start_full_n : STD_LOGIC;
    signal mat2mem_U0_start_write : STD_LOGIC;

    component Block_Mat_exit3_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        rows : IN STD_LOGIC_VECTOR (31 downto 0);
        cols : IN STD_LOGIC_VECTOR (31 downto 0);
        indexr : IN STD_LOGIC_VECTOR (31 downto 0);
        img_rows_V_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        img_rows_V_out_full_n : IN STD_LOGIC;
        img_rows_V_out_write : OUT STD_LOGIC;
        img_cols_V_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        img_cols_V_out_full_n : IN STD_LOGIC;
        img_cols_V_out_write : OUT STD_LOGIC;
        indexr_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        indexr_out_full_n : IN STD_LOGIC;
        indexr_out_write : OUT STD_LOGIC );
    end component;


    component AXIvideo2Mat IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        vstream_TDATA : IN STD_LOGIC_VECTOR (23 downto 0);
        vstream_TVALID : IN STD_LOGIC;
        vstream_TREADY : OUT STD_LOGIC;
        vstream_TKEEP : IN STD_LOGIC_VECTOR (2 downto 0);
        vstream_TSTRB : IN STD_LOGIC_VECTOR (2 downto 0);
        vstream_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        vstream_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        vstream_TID : IN STD_LOGIC_VECTOR (0 downto 0);
        vstream_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
        img_rows_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        img_rows_V_empty_n : IN STD_LOGIC;
        img_rows_V_read : OUT STD_LOGIC;
        img_cols_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        img_cols_V_empty_n : IN STD_LOGIC;
        img_cols_V_read : OUT STD_LOGIC;
        img_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_0_V_full_n : IN STD_LOGIC;
        img_data_stream_0_V_write : OUT STD_LOGIC;
        img_data_stream_1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_1_V_full_n : IN STD_LOGIC;
        img_data_stream_1_V_write : OUT STD_LOGIC;
        img_data_stream_2_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_2_V_full_n : IN STD_LOGIC;
        img_data_stream_2_V_write : OUT STD_LOGIC;
        img_rows_V_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        img_rows_V_out_full_n : IN STD_LOGIC;
        img_rows_V_out_write : OUT STD_LOGIC;
        img_cols_V_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        img_cols_V_out_full_n : IN STD_LOGIC;
        img_cols_V_out_write : OUT STD_LOGIC );
    end component;


    component mat2mem IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        img_rows_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        img_rows_V_empty_n : IN STD_LOGIC;
        img_rows_V_read : OUT STD_LOGIC;
        img_cols_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        img_cols_V_empty_n : IN STD_LOGIC;
        img_cols_V_read : OUT STD_LOGIC;
        img_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_0_V_empty_n : IN STD_LOGIC;
        img_data_stream_0_V_read : OUT STD_LOGIC;
        img_data_stream_1_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_1_V_empty_n : IN STD_LOGIC;
        img_data_stream_1_V_read : OUT STD_LOGIC;
        img_data_stream_2_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_2_V_empty_n : IN STD_LOGIC;
        img_data_stream_2_V_read : OUT STD_LOGIC;
        m_axi_pMemPort_AWVALID : OUT STD_LOGIC;
        m_axi_pMemPort_AWREADY : IN STD_LOGIC;
        m_axi_pMemPort_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_pMemPort_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_pMemPort_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_pMemPort_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_pMemPort_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_pMemPort_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_pMemPort_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_pMemPort_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_pMemPort_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_pMemPort_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_pMemPort_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_pMemPort_WVALID : OUT STD_LOGIC;
        m_axi_pMemPort_WREADY : IN STD_LOGIC;
        m_axi_pMemPort_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_pMemPort_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_pMemPort_WLAST : OUT STD_LOGIC;
        m_axi_pMemPort_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_pMemPort_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_pMemPort_ARVALID : OUT STD_LOGIC;
        m_axi_pMemPort_ARREADY : IN STD_LOGIC;
        m_axi_pMemPort_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_pMemPort_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_pMemPort_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_pMemPort_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_pMemPort_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_pMemPort_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_pMemPort_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_pMemPort_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_pMemPort_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_pMemPort_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_pMemPort_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_pMemPort_RVALID : IN STD_LOGIC;
        m_axi_pMemPort_RREADY : OUT STD_LOGIC;
        m_axi_pMemPort_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_pMemPort_RLAST : IN STD_LOGIC;
        m_axi_pMemPort_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_pMemPort_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_pMemPort_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_pMemPort_BVALID : IN STD_LOGIC;
        m_axi_pMemPort_BREADY : OUT STD_LOGIC;
        m_axi_pMemPort_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_pMemPort_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_pMemPort_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        w : OUT STD_LOGIC_VECTOR (31 downto 0);
        w_ap_vld : OUT STD_LOGIC;
        r_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        r_empty_n : IN STD_LOGIC;
        r_read : OUT STD_LOGIC;
        baseAddr_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
        baseAddr_ce0 : OUT STD_LOGIC;
        baseAddr_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fifo_w32_d1_A_x IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w32_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w8_d1_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component stream2mem_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        rows : OUT STD_LOGIC_VECTOR (31 downto 0);
        cols : OUT STD_LOGIC_VECTOR (31 downto 0);
        baseAddr_address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        baseAddr_ce0 : IN STD_LOGIC;
        baseAddr_q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component stream2mem_pMemPort_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_TARGET_ADDR : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    stream2mem_AXILiteS_s_axi_U : component stream2mem_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        rows => rows,
        cols => cols,
        baseAddr_address0 => mat2mem_U0_baseAddr_address0,
        baseAddr_ce0 => mat2mem_U0_baseAddr_ce0,
        baseAddr_q0 => baseAddr_q0);

    stream2mem_pMemPort_m_axi_U : component stream2mem_pMemPort_m_axi
    generic map (
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_PMEMPORT_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_PMEMPORT_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_PMEMPORT_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_PMEMPORT_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_PMEMPORT_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_PMEMPORT_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_PMEMPORT_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_PMEMPORT_BUSER_WIDTH,
        C_TARGET_ADDR => C_M_AXI_PMEMPORT_TARGET_ADDR,
        C_USER_VALUE => C_M_AXI_PMEMPORT_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_PMEMPORT_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_PMEMPORT_CACHE_VALUE)
    port map (
        AWVALID => m_axi_pMemPort_AWVALID,
        AWREADY => m_axi_pMemPort_AWREADY,
        AWADDR => m_axi_pMemPort_AWADDR,
        AWID => m_axi_pMemPort_AWID,
        AWLEN => m_axi_pMemPort_AWLEN,
        AWSIZE => m_axi_pMemPort_AWSIZE,
        AWBURST => m_axi_pMemPort_AWBURST,
        AWLOCK => m_axi_pMemPort_AWLOCK,
        AWCACHE => m_axi_pMemPort_AWCACHE,
        AWPROT => m_axi_pMemPort_AWPROT,
        AWQOS => m_axi_pMemPort_AWQOS,
        AWREGION => m_axi_pMemPort_AWREGION,
        AWUSER => m_axi_pMemPort_AWUSER,
        WVALID => m_axi_pMemPort_WVALID,
        WREADY => m_axi_pMemPort_WREADY,
        WDATA => m_axi_pMemPort_WDATA,
        WSTRB => m_axi_pMemPort_WSTRB,
        WLAST => m_axi_pMemPort_WLAST,
        WID => m_axi_pMemPort_WID,
        WUSER => m_axi_pMemPort_WUSER,
        ARVALID => m_axi_pMemPort_ARVALID,
        ARREADY => m_axi_pMemPort_ARREADY,
        ARADDR => m_axi_pMemPort_ARADDR,
        ARID => m_axi_pMemPort_ARID,
        ARLEN => m_axi_pMemPort_ARLEN,
        ARSIZE => m_axi_pMemPort_ARSIZE,
        ARBURST => m_axi_pMemPort_ARBURST,
        ARLOCK => m_axi_pMemPort_ARLOCK,
        ARCACHE => m_axi_pMemPort_ARCACHE,
        ARPROT => m_axi_pMemPort_ARPROT,
        ARQOS => m_axi_pMemPort_ARQOS,
        ARREGION => m_axi_pMemPort_ARREGION,
        ARUSER => m_axi_pMemPort_ARUSER,
        RVALID => m_axi_pMemPort_RVALID,
        RREADY => m_axi_pMemPort_RREADY,
        RDATA => m_axi_pMemPort_RDATA,
        RLAST => m_axi_pMemPort_RLAST,
        RID => m_axi_pMemPort_RID,
        RUSER => m_axi_pMemPort_RUSER,
        RRESP => m_axi_pMemPort_RRESP,
        BVALID => m_axi_pMemPort_BVALID,
        BREADY => m_axi_pMemPort_BREADY,
        BRESP => m_axi_pMemPort_BRESP,
        BID => m_axi_pMemPort_BID,
        BUSER => m_axi_pMemPort_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => pMemPort_ARREADY,
        I_ARADDR => ap_const_lv32_0,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => pMemPort_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => pMemPort_RDATA,
        I_RID => pMemPort_RID,
        I_RUSER => pMemPort_RUSER,
        I_RRESP => pMemPort_RRESP,
        I_RLAST => pMemPort_RLAST,
        I_AWVALID => mat2mem_U0_m_axi_pMemPort_AWVALID,
        I_AWREADY => pMemPort_AWREADY,
        I_AWADDR => mat2mem_U0_m_axi_pMemPort_AWADDR,
        I_AWID => mat2mem_U0_m_axi_pMemPort_AWID,
        I_AWLEN => mat2mem_U0_m_axi_pMemPort_AWLEN,
        I_AWSIZE => mat2mem_U0_m_axi_pMemPort_AWSIZE,
        I_AWLOCK => mat2mem_U0_m_axi_pMemPort_AWLOCK,
        I_AWCACHE => mat2mem_U0_m_axi_pMemPort_AWCACHE,
        I_AWQOS => mat2mem_U0_m_axi_pMemPort_AWQOS,
        I_AWPROT => mat2mem_U0_m_axi_pMemPort_AWPROT,
        I_AWUSER => mat2mem_U0_m_axi_pMemPort_AWUSER,
        I_AWBURST => mat2mem_U0_m_axi_pMemPort_AWBURST,
        I_AWREGION => mat2mem_U0_m_axi_pMemPort_AWREGION,
        I_WVALID => mat2mem_U0_m_axi_pMemPort_WVALID,
        I_WREADY => pMemPort_WREADY,
        I_WDATA => mat2mem_U0_m_axi_pMemPort_WDATA,
        I_WID => mat2mem_U0_m_axi_pMemPort_WID,
        I_WUSER => mat2mem_U0_m_axi_pMemPort_WUSER,
        I_WLAST => mat2mem_U0_m_axi_pMemPort_WLAST,
        I_WSTRB => mat2mem_U0_m_axi_pMemPort_WSTRB,
        I_BVALID => pMemPort_BVALID,
        I_BREADY => mat2mem_U0_m_axi_pMemPort_BREADY,
        I_BRESP => pMemPort_BRESP,
        I_BID => pMemPort_BID,
        I_BUSER => pMemPort_BUSER);

    Block_Mat_exit3_proc_U0 : component Block_Mat_exit3_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Block_Mat_exit3_proc_U0_ap_start,
        ap_done => Block_Mat_exit3_proc_U0_ap_done,
        ap_continue => Block_Mat_exit3_proc_U0_ap_continue,
        ap_idle => Block_Mat_exit3_proc_U0_ap_idle,
        ap_ready => Block_Mat_exit3_proc_U0_ap_ready,
        rows => rows,
        cols => cols,
        indexr => indexr,
        img_rows_V_out_din => Block_Mat_exit3_proc_U0_img_rows_V_out_din,
        img_rows_V_out_full_n => img_rows_V_c_full_n,
        img_rows_V_out_write => Block_Mat_exit3_proc_U0_img_rows_V_out_write,
        img_cols_V_out_din => Block_Mat_exit3_proc_U0_img_cols_V_out_din,
        img_cols_V_out_full_n => img_cols_V_c_full_n,
        img_cols_V_out_write => Block_Mat_exit3_proc_U0_img_cols_V_out_write,
        indexr_out_din => Block_Mat_exit3_proc_U0_indexr_out_din,
        indexr_out_full_n => indexr_c_full_n,
        indexr_out_write => Block_Mat_exit3_proc_U0_indexr_out_write);

    AXIvideo2Mat_U0 : component AXIvideo2Mat
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => AXIvideo2Mat_U0_ap_start,
        ap_done => AXIvideo2Mat_U0_ap_done,
        ap_continue => AXIvideo2Mat_U0_ap_continue,
        ap_idle => AXIvideo2Mat_U0_ap_idle,
        ap_ready => AXIvideo2Mat_U0_ap_ready,
        vstream_TDATA => vstream_TDATA,
        vstream_TVALID => vstream_TVALID,
        vstream_TREADY => AXIvideo2Mat_U0_vstream_TREADY,
        vstream_TKEEP => vstream_TKEEP,
        vstream_TSTRB => vstream_TSTRB,
        vstream_TUSER => vstream_TUSER,
        vstream_TLAST => vstream_TLAST,
        vstream_TID => vstream_TID,
        vstream_TDEST => vstream_TDEST,
        img_rows_V_dout => img_rows_V_c_dout,
        img_rows_V_empty_n => img_rows_V_c_empty_n,
        img_rows_V_read => AXIvideo2Mat_U0_img_rows_V_read,
        img_cols_V_dout => img_cols_V_c_dout,
        img_cols_V_empty_n => img_cols_V_c_empty_n,
        img_cols_V_read => AXIvideo2Mat_U0_img_cols_V_read,
        img_data_stream_0_V_din => AXIvideo2Mat_U0_img_data_stream_0_V_din,
        img_data_stream_0_V_full_n => img_data_stream_0_V_full_n,
        img_data_stream_0_V_write => AXIvideo2Mat_U0_img_data_stream_0_V_write,
        img_data_stream_1_V_din => AXIvideo2Mat_U0_img_data_stream_1_V_din,
        img_data_stream_1_V_full_n => img_data_stream_1_V_full_n,
        img_data_stream_1_V_write => AXIvideo2Mat_U0_img_data_stream_1_V_write,
        img_data_stream_2_V_din => AXIvideo2Mat_U0_img_data_stream_2_V_din,
        img_data_stream_2_V_full_n => img_data_stream_2_V_full_n,
        img_data_stream_2_V_write => AXIvideo2Mat_U0_img_data_stream_2_V_write,
        img_rows_V_out_din => AXIvideo2Mat_U0_img_rows_V_out_din,
        img_rows_V_out_full_n => img_rows_V_c9_full_n,
        img_rows_V_out_write => AXIvideo2Mat_U0_img_rows_V_out_write,
        img_cols_V_out_din => AXIvideo2Mat_U0_img_cols_V_out_din,
        img_cols_V_out_full_n => img_cols_V_c10_full_n,
        img_cols_V_out_write => AXIvideo2Mat_U0_img_cols_V_out_write);

    mat2mem_U0 : component mat2mem
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => mat2mem_U0_ap_start,
        ap_done => mat2mem_U0_ap_done,
        ap_continue => mat2mem_U0_ap_continue,
        ap_idle => mat2mem_U0_ap_idle,
        ap_ready => mat2mem_U0_ap_ready,
        img_rows_V_dout => img_rows_V_c9_dout,
        img_rows_V_empty_n => img_rows_V_c9_empty_n,
        img_rows_V_read => mat2mem_U0_img_rows_V_read,
        img_cols_V_dout => img_cols_V_c10_dout,
        img_cols_V_empty_n => img_cols_V_c10_empty_n,
        img_cols_V_read => mat2mem_U0_img_cols_V_read,
        img_data_stream_0_V_dout => img_data_stream_0_V_dout,
        img_data_stream_0_V_empty_n => img_data_stream_0_V_empty_n,
        img_data_stream_0_V_read => mat2mem_U0_img_data_stream_0_V_read,
        img_data_stream_1_V_dout => img_data_stream_1_V_dout,
        img_data_stream_1_V_empty_n => img_data_stream_1_V_empty_n,
        img_data_stream_1_V_read => mat2mem_U0_img_data_stream_1_V_read,
        img_data_stream_2_V_dout => img_data_stream_2_V_dout,
        img_data_stream_2_V_empty_n => img_data_stream_2_V_empty_n,
        img_data_stream_2_V_read => mat2mem_U0_img_data_stream_2_V_read,
        m_axi_pMemPort_AWVALID => mat2mem_U0_m_axi_pMemPort_AWVALID,
        m_axi_pMemPort_AWREADY => pMemPort_AWREADY,
        m_axi_pMemPort_AWADDR => mat2mem_U0_m_axi_pMemPort_AWADDR,
        m_axi_pMemPort_AWID => mat2mem_U0_m_axi_pMemPort_AWID,
        m_axi_pMemPort_AWLEN => mat2mem_U0_m_axi_pMemPort_AWLEN,
        m_axi_pMemPort_AWSIZE => mat2mem_U0_m_axi_pMemPort_AWSIZE,
        m_axi_pMemPort_AWBURST => mat2mem_U0_m_axi_pMemPort_AWBURST,
        m_axi_pMemPort_AWLOCK => mat2mem_U0_m_axi_pMemPort_AWLOCK,
        m_axi_pMemPort_AWCACHE => mat2mem_U0_m_axi_pMemPort_AWCACHE,
        m_axi_pMemPort_AWPROT => mat2mem_U0_m_axi_pMemPort_AWPROT,
        m_axi_pMemPort_AWQOS => mat2mem_U0_m_axi_pMemPort_AWQOS,
        m_axi_pMemPort_AWREGION => mat2mem_U0_m_axi_pMemPort_AWREGION,
        m_axi_pMemPort_AWUSER => mat2mem_U0_m_axi_pMemPort_AWUSER,
        m_axi_pMemPort_WVALID => mat2mem_U0_m_axi_pMemPort_WVALID,
        m_axi_pMemPort_WREADY => pMemPort_WREADY,
        m_axi_pMemPort_WDATA => mat2mem_U0_m_axi_pMemPort_WDATA,
        m_axi_pMemPort_WSTRB => mat2mem_U0_m_axi_pMemPort_WSTRB,
        m_axi_pMemPort_WLAST => mat2mem_U0_m_axi_pMemPort_WLAST,
        m_axi_pMemPort_WID => mat2mem_U0_m_axi_pMemPort_WID,
        m_axi_pMemPort_WUSER => mat2mem_U0_m_axi_pMemPort_WUSER,
        m_axi_pMemPort_ARVALID => mat2mem_U0_m_axi_pMemPort_ARVALID,
        m_axi_pMemPort_ARREADY => ap_const_logic_0,
        m_axi_pMemPort_ARADDR => mat2mem_U0_m_axi_pMemPort_ARADDR,
        m_axi_pMemPort_ARID => mat2mem_U0_m_axi_pMemPort_ARID,
        m_axi_pMemPort_ARLEN => mat2mem_U0_m_axi_pMemPort_ARLEN,
        m_axi_pMemPort_ARSIZE => mat2mem_U0_m_axi_pMemPort_ARSIZE,
        m_axi_pMemPort_ARBURST => mat2mem_U0_m_axi_pMemPort_ARBURST,
        m_axi_pMemPort_ARLOCK => mat2mem_U0_m_axi_pMemPort_ARLOCK,
        m_axi_pMemPort_ARCACHE => mat2mem_U0_m_axi_pMemPort_ARCACHE,
        m_axi_pMemPort_ARPROT => mat2mem_U0_m_axi_pMemPort_ARPROT,
        m_axi_pMemPort_ARQOS => mat2mem_U0_m_axi_pMemPort_ARQOS,
        m_axi_pMemPort_ARREGION => mat2mem_U0_m_axi_pMemPort_ARREGION,
        m_axi_pMemPort_ARUSER => mat2mem_U0_m_axi_pMemPort_ARUSER,
        m_axi_pMemPort_RVALID => ap_const_logic_0,
        m_axi_pMemPort_RREADY => mat2mem_U0_m_axi_pMemPort_RREADY,
        m_axi_pMemPort_RDATA => ap_const_lv32_0,
        m_axi_pMemPort_RLAST => ap_const_logic_0,
        m_axi_pMemPort_RID => ap_const_lv1_0,
        m_axi_pMemPort_RUSER => ap_const_lv1_0,
        m_axi_pMemPort_RRESP => ap_const_lv2_0,
        m_axi_pMemPort_BVALID => pMemPort_BVALID,
        m_axi_pMemPort_BREADY => mat2mem_U0_m_axi_pMemPort_BREADY,
        m_axi_pMemPort_BRESP => pMemPort_BRESP,
        m_axi_pMemPort_BID => pMemPort_BID,
        m_axi_pMemPort_BUSER => pMemPort_BUSER,
        w => mat2mem_U0_w,
        w_ap_vld => mat2mem_U0_w_ap_vld,
        r_dout => indexr_c_dout,
        r_empty_n => indexr_c_empty_n,
        r_read => mat2mem_U0_r_read,
        baseAddr_address0 => mat2mem_U0_baseAddr_address0,
        baseAddr_ce0 => mat2mem_U0_baseAddr_ce0,
        baseAddr_q0 => baseAddr_q0);

    img_rows_V_c_U : component fifo_w32_d1_A_x
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_Mat_exit3_proc_U0_img_rows_V_out_din,
        if_full_n => img_rows_V_c_full_n,
        if_write => Block_Mat_exit3_proc_U0_img_rows_V_out_write,
        if_dout => img_rows_V_c_dout,
        if_empty_n => img_rows_V_c_empty_n,
        if_read => AXIvideo2Mat_U0_img_rows_V_read);

    img_cols_V_c_U : component fifo_w32_d1_A_x
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_Mat_exit3_proc_U0_img_cols_V_out_din,
        if_full_n => img_cols_V_c_full_n,
        if_write => Block_Mat_exit3_proc_U0_img_cols_V_out_write,
        if_dout => img_cols_V_c_dout,
        if_empty_n => img_cols_V_c_empty_n,
        if_read => AXIvideo2Mat_U0_img_cols_V_read);

    indexr_c_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_Mat_exit3_proc_U0_indexr_out_din,
        if_full_n => indexr_c_full_n,
        if_write => Block_Mat_exit3_proc_U0_indexr_out_write,
        if_dout => indexr_c_dout,
        if_empty_n => indexr_c_empty_n,
        if_read => mat2mem_U0_r_read);

    img_data_stream_0_V_U : component fifo_w8_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIvideo2Mat_U0_img_data_stream_0_V_din,
        if_full_n => img_data_stream_0_V_full_n,
        if_write => AXIvideo2Mat_U0_img_data_stream_0_V_write,
        if_dout => img_data_stream_0_V_dout,
        if_empty_n => img_data_stream_0_V_empty_n,
        if_read => mat2mem_U0_img_data_stream_0_V_read);

    img_data_stream_1_V_U : component fifo_w8_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIvideo2Mat_U0_img_data_stream_1_V_din,
        if_full_n => img_data_stream_1_V_full_n,
        if_write => AXIvideo2Mat_U0_img_data_stream_1_V_write,
        if_dout => img_data_stream_1_V_dout,
        if_empty_n => img_data_stream_1_V_empty_n,
        if_read => mat2mem_U0_img_data_stream_1_V_read);

    img_data_stream_2_V_U : component fifo_w8_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIvideo2Mat_U0_img_data_stream_2_V_din,
        if_full_n => img_data_stream_2_V_full_n,
        if_write => AXIvideo2Mat_U0_img_data_stream_2_V_write,
        if_dout => img_data_stream_2_V_dout,
        if_empty_n => img_data_stream_2_V_empty_n,
        if_read => mat2mem_U0_img_data_stream_2_V_read);

    img_rows_V_c9_U : component fifo_w32_d1_A_x
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIvideo2Mat_U0_img_rows_V_out_din,
        if_full_n => img_rows_V_c9_full_n,
        if_write => AXIvideo2Mat_U0_img_rows_V_out_write,
        if_dout => img_rows_V_c9_dout,
        if_empty_n => img_rows_V_c9_empty_n,
        if_read => mat2mem_U0_img_rows_V_read);

    img_cols_V_c10_U : component fifo_w32_d1_A_x
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIvideo2Mat_U0_img_cols_V_out_din,
        if_full_n => img_cols_V_c10_full_n,
        if_write => AXIvideo2Mat_U0_img_cols_V_out_write,
        if_dout => img_cols_V_c10_dout,
        if_empty_n => img_cols_V_c10_empty_n,
        if_read => mat2mem_U0_img_cols_V_read);




    AXIvideo2Mat_U0_ap_continue <= ap_const_logic_1;
    AXIvideo2Mat_U0_ap_start <= ap_const_logic_1;
    AXIvideo2Mat_U0_start_full_n <= ap_const_logic_1;
    AXIvideo2Mat_U0_start_write <= ap_const_logic_0;
    Block_Mat_exit3_proc_U0_ap_continue <= ap_const_logic_1;
    Block_Mat_exit3_proc_U0_ap_start <= ap_const_logic_1;
    Block_Mat_exit3_proc_U0_start_full_n <= ap_const_logic_1;
    Block_Mat_exit3_proc_U0_start_write <= ap_const_logic_0;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_continue <= ap_const_logic_0;
    indexw <= mat2mem_U0_w;
    mat2mem_U0_ap_continue <= ap_const_logic_1;
    mat2mem_U0_ap_start <= ap_const_logic_1;
    mat2mem_U0_start_full_n <= ap_const_logic_1;
    mat2mem_U0_start_write <= ap_const_logic_0;
    vstream_TREADY <= AXIvideo2Mat_U0_vstream_TREADY;
end behav;
