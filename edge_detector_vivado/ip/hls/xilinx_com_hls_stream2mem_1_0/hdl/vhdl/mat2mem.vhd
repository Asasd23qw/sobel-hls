-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mat2mem is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    img_rows_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    img_rows_V_empty_n : IN STD_LOGIC;
    img_rows_V_read : OUT STD_LOGIC;
    img_cols_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    img_cols_V_empty_n : IN STD_LOGIC;
    img_cols_V_read : OUT STD_LOGIC;
    img_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    img_data_stream_0_V_empty_n : IN STD_LOGIC;
    img_data_stream_0_V_read : OUT STD_LOGIC;
    img_data_stream_1_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    img_data_stream_1_V_empty_n : IN STD_LOGIC;
    img_data_stream_1_V_read : OUT STD_LOGIC;
    img_data_stream_2_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    img_data_stream_2_V_empty_n : IN STD_LOGIC;
    img_data_stream_2_V_read : OUT STD_LOGIC;
    m_axi_pMemPort_AWVALID : OUT STD_LOGIC;
    m_axi_pMemPort_AWREADY : IN STD_LOGIC;
    m_axi_pMemPort_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_pMemPort_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_pMemPort_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_pMemPort_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_pMemPort_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_pMemPort_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_pMemPort_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_pMemPort_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_pMemPort_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_pMemPort_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_pMemPort_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_pMemPort_WVALID : OUT STD_LOGIC;
    m_axi_pMemPort_WREADY : IN STD_LOGIC;
    m_axi_pMemPort_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_pMemPort_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_pMemPort_WLAST : OUT STD_LOGIC;
    m_axi_pMemPort_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_pMemPort_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_pMemPort_ARVALID : OUT STD_LOGIC;
    m_axi_pMemPort_ARREADY : IN STD_LOGIC;
    m_axi_pMemPort_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_pMemPort_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_pMemPort_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_pMemPort_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_pMemPort_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_pMemPort_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_pMemPort_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_pMemPort_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_pMemPort_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_pMemPort_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_pMemPort_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_pMemPort_RVALID : IN STD_LOGIC;
    m_axi_pMemPort_RREADY : OUT STD_LOGIC;
    m_axi_pMemPort_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_pMemPort_RLAST : IN STD_LOGIC;
    m_axi_pMemPort_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_pMemPort_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_pMemPort_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_pMemPort_BVALID : IN STD_LOGIC;
    m_axi_pMemPort_BREADY : OUT STD_LOGIC;
    m_axi_pMemPort_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_pMemPort_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_pMemPort_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    w : OUT STD_LOGIC_VECTOR (31 downto 0);
    w_ap_vld : OUT STD_LOGIC;
    r_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    r_empty_n : IN STD_LOGIC;
    r_read : OUT STD_LOGIC;
    baseAddr_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    baseAddr_ce0 : OUT STD_LOGIC;
    baseAddr_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of mat2mem is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal index : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal img_rows_V_blk_n : STD_LOGIC;
    signal img_cols_V_blk_n : STD_LOGIC;
    signal r_blk_n : STD_LOGIC;
    signal img_cols_V_read_reg_215 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal r_read_reg_220 : STD_LOGIC_VECTOR (31 downto 0);
    signal local_rows_reg_226 : STD_LOGIC_VECTOR (31 downto 0);
    signal n_fu_190_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal n_reg_236 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dataflow_parent_loop_1_fu_145_img_data_stream_0_V_read : STD_LOGIC;
    signal grp_dataflow_parent_loop_1_fu_145_img_data_stream_1_V_read : STD_LOGIC;
    signal grp_dataflow_parent_loop_1_fu_145_img_data_stream_2_V_read : STD_LOGIC;
    signal grp_dataflow_parent_loop_1_fu_145_m_axi_pMemPort_AWVALID : STD_LOGIC;
    signal grp_dataflow_parent_loop_1_fu_145_m_axi_pMemPort_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dataflow_parent_loop_1_fu_145_m_axi_pMemPort_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dataflow_parent_loop_1_fu_145_m_axi_pMemPort_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dataflow_parent_loop_1_fu_145_m_axi_pMemPort_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_dataflow_parent_loop_1_fu_145_m_axi_pMemPort_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_dataflow_parent_loop_1_fu_145_m_axi_pMemPort_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_dataflow_parent_loop_1_fu_145_m_axi_pMemPort_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dataflow_parent_loop_1_fu_145_m_axi_pMemPort_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_dataflow_parent_loop_1_fu_145_m_axi_pMemPort_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dataflow_parent_loop_1_fu_145_m_axi_pMemPort_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dataflow_parent_loop_1_fu_145_m_axi_pMemPort_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dataflow_parent_loop_1_fu_145_m_axi_pMemPort_WVALID : STD_LOGIC;
    signal grp_dataflow_parent_loop_1_fu_145_m_axi_pMemPort_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dataflow_parent_loop_1_fu_145_m_axi_pMemPort_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dataflow_parent_loop_1_fu_145_m_axi_pMemPort_WLAST : STD_LOGIC;
    signal grp_dataflow_parent_loop_1_fu_145_m_axi_pMemPort_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dataflow_parent_loop_1_fu_145_m_axi_pMemPort_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dataflow_parent_loop_1_fu_145_m_axi_pMemPort_ARVALID : STD_LOGIC;
    signal grp_dataflow_parent_loop_1_fu_145_m_axi_pMemPort_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dataflow_parent_loop_1_fu_145_m_axi_pMemPort_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dataflow_parent_loop_1_fu_145_m_axi_pMemPort_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dataflow_parent_loop_1_fu_145_m_axi_pMemPort_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_dataflow_parent_loop_1_fu_145_m_axi_pMemPort_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_dataflow_parent_loop_1_fu_145_m_axi_pMemPort_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_dataflow_parent_loop_1_fu_145_m_axi_pMemPort_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dataflow_parent_loop_1_fu_145_m_axi_pMemPort_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_dataflow_parent_loop_1_fu_145_m_axi_pMemPort_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dataflow_parent_loop_1_fu_145_m_axi_pMemPort_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dataflow_parent_loop_1_fu_145_m_axi_pMemPort_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dataflow_parent_loop_1_fu_145_m_axi_pMemPort_RREADY : STD_LOGIC;
    signal grp_dataflow_parent_loop_1_fu_145_m_axi_pMemPort_BREADY : STD_LOGIC;
    signal grp_dataflow_parent_loop_1_fu_145_baseAddr_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_dataflow_parent_loop_1_fu_145_baseAddr_ce0 : STD_LOGIC;
    signal grp_dataflow_parent_loop_1_fu_145_baseAddr_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dataflow_parent_loop_1_fu_145_baseAddr_we0 : STD_LOGIC;
    signal grp_dataflow_parent_loop_1_fu_145_ap_done : STD_LOGIC;
    signal grp_dataflow_parent_loop_1_fu_145_ap_start : STD_LOGIC;
    signal grp_dataflow_parent_loop_1_fu_145_ap_ready : STD_LOGIC;
    signal grp_dataflow_parent_loop_1_fu_145_ap_idle : STD_LOGIC;
    signal grp_dataflow_parent_loop_1_fu_145_ap_continue : STD_LOGIC;
    signal ap_reg_grp_dataflow_parent_loop_1_fu_145_ap_start : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_sync_reg_grp_dataflow_parent_loop_1_fu_145_ap_ready : STD_LOGIC := '0';
    signal ap_sync_grp_dataflow_parent_loop_1_fu_145_ap_ready : STD_LOGIC;
    signal n_1_fu_202_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_fu_168_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_fu_178_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_i_fu_184_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_fu_198_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);

    component dataflow_parent_loop_1 IS
    port (
        local_rows : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read : IN STD_LOGIC_VECTOR (31 downto 0);
        img_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_0_V_empty_n : IN STD_LOGIC;
        img_data_stream_0_V_read : OUT STD_LOGIC;
        img_data_stream_1_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_1_V_empty_n : IN STD_LOGIC;
        img_data_stream_1_V_read : OUT STD_LOGIC;
        img_data_stream_2_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_2_V_empty_n : IN STD_LOGIC;
        img_data_stream_2_V_read : OUT STD_LOGIC;
        r : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_pMemPort_AWVALID : OUT STD_LOGIC;
        m_axi_pMemPort_AWREADY : IN STD_LOGIC;
        m_axi_pMemPort_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_pMemPort_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_pMemPort_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_pMemPort_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_pMemPort_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_pMemPort_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_pMemPort_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_pMemPort_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_pMemPort_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_pMemPort_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_pMemPort_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_pMemPort_WVALID : OUT STD_LOGIC;
        m_axi_pMemPort_WREADY : IN STD_LOGIC;
        m_axi_pMemPort_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_pMemPort_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_pMemPort_WLAST : OUT STD_LOGIC;
        m_axi_pMemPort_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_pMemPort_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_pMemPort_ARVALID : OUT STD_LOGIC;
        m_axi_pMemPort_ARREADY : IN STD_LOGIC;
        m_axi_pMemPort_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_pMemPort_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_pMemPort_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_pMemPort_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_pMemPort_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_pMemPort_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_pMemPort_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_pMemPort_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_pMemPort_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_pMemPort_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_pMemPort_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_pMemPort_RVALID : IN STD_LOGIC;
        m_axi_pMemPort_RREADY : OUT STD_LOGIC;
        m_axi_pMemPort_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_pMemPort_RLAST : IN STD_LOGIC;
        m_axi_pMemPort_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_pMemPort_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_pMemPort_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_pMemPort_BVALID : IN STD_LOGIC;
        m_axi_pMemPort_BREADY : OUT STD_LOGIC;
        m_axi_pMemPort_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_pMemPort_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_pMemPort_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        index : IN STD_LOGIC_VECTOR (31 downto 0);
        baseAddr_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
        baseAddr_ce0 : OUT STD_LOGIC;
        baseAddr_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        baseAddr_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        baseAddr_we0 : OUT STD_LOGIC;
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        p_read_ap_vld : IN STD_LOGIC;
        r_ap_vld : IN STD_LOGIC;
        index_ap_vld : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;



begin
    grp_dataflow_parent_loop_1_fu_145 : component dataflow_parent_loop_1
    port map (
        local_rows => local_rows_reg_226,
        p_read => img_cols_V_read_reg_215,
        img_data_stream_0_V_dout => img_data_stream_0_V_dout,
        img_data_stream_0_V_empty_n => img_data_stream_0_V_empty_n,
        img_data_stream_0_V_read => grp_dataflow_parent_loop_1_fu_145_img_data_stream_0_V_read,
        img_data_stream_1_V_dout => img_data_stream_1_V_dout,
        img_data_stream_1_V_empty_n => img_data_stream_1_V_empty_n,
        img_data_stream_1_V_read => grp_dataflow_parent_loop_1_fu_145_img_data_stream_1_V_read,
        img_data_stream_2_V_dout => img_data_stream_2_V_dout,
        img_data_stream_2_V_empty_n => img_data_stream_2_V_empty_n,
        img_data_stream_2_V_read => grp_dataflow_parent_loop_1_fu_145_img_data_stream_2_V_read,
        r => r_read_reg_220,
        m_axi_pMemPort_AWVALID => grp_dataflow_parent_loop_1_fu_145_m_axi_pMemPort_AWVALID,
        m_axi_pMemPort_AWREADY => m_axi_pMemPort_AWREADY,
        m_axi_pMemPort_AWADDR => grp_dataflow_parent_loop_1_fu_145_m_axi_pMemPort_AWADDR,
        m_axi_pMemPort_AWID => grp_dataflow_parent_loop_1_fu_145_m_axi_pMemPort_AWID,
        m_axi_pMemPort_AWLEN => grp_dataflow_parent_loop_1_fu_145_m_axi_pMemPort_AWLEN,
        m_axi_pMemPort_AWSIZE => grp_dataflow_parent_loop_1_fu_145_m_axi_pMemPort_AWSIZE,
        m_axi_pMemPort_AWBURST => grp_dataflow_parent_loop_1_fu_145_m_axi_pMemPort_AWBURST,
        m_axi_pMemPort_AWLOCK => grp_dataflow_parent_loop_1_fu_145_m_axi_pMemPort_AWLOCK,
        m_axi_pMemPort_AWCACHE => grp_dataflow_parent_loop_1_fu_145_m_axi_pMemPort_AWCACHE,
        m_axi_pMemPort_AWPROT => grp_dataflow_parent_loop_1_fu_145_m_axi_pMemPort_AWPROT,
        m_axi_pMemPort_AWQOS => grp_dataflow_parent_loop_1_fu_145_m_axi_pMemPort_AWQOS,
        m_axi_pMemPort_AWREGION => grp_dataflow_parent_loop_1_fu_145_m_axi_pMemPort_AWREGION,
        m_axi_pMemPort_AWUSER => grp_dataflow_parent_loop_1_fu_145_m_axi_pMemPort_AWUSER,
        m_axi_pMemPort_WVALID => grp_dataflow_parent_loop_1_fu_145_m_axi_pMemPort_WVALID,
        m_axi_pMemPort_WREADY => m_axi_pMemPort_WREADY,
        m_axi_pMemPort_WDATA => grp_dataflow_parent_loop_1_fu_145_m_axi_pMemPort_WDATA,
        m_axi_pMemPort_WSTRB => grp_dataflow_parent_loop_1_fu_145_m_axi_pMemPort_WSTRB,
        m_axi_pMemPort_WLAST => grp_dataflow_parent_loop_1_fu_145_m_axi_pMemPort_WLAST,
        m_axi_pMemPort_WID => grp_dataflow_parent_loop_1_fu_145_m_axi_pMemPort_WID,
        m_axi_pMemPort_WUSER => grp_dataflow_parent_loop_1_fu_145_m_axi_pMemPort_WUSER,
        m_axi_pMemPort_ARVALID => grp_dataflow_parent_loop_1_fu_145_m_axi_pMemPort_ARVALID,
        m_axi_pMemPort_ARREADY => ap_const_logic_0,
        m_axi_pMemPort_ARADDR => grp_dataflow_parent_loop_1_fu_145_m_axi_pMemPort_ARADDR,
        m_axi_pMemPort_ARID => grp_dataflow_parent_loop_1_fu_145_m_axi_pMemPort_ARID,
        m_axi_pMemPort_ARLEN => grp_dataflow_parent_loop_1_fu_145_m_axi_pMemPort_ARLEN,
        m_axi_pMemPort_ARSIZE => grp_dataflow_parent_loop_1_fu_145_m_axi_pMemPort_ARSIZE,
        m_axi_pMemPort_ARBURST => grp_dataflow_parent_loop_1_fu_145_m_axi_pMemPort_ARBURST,
        m_axi_pMemPort_ARLOCK => grp_dataflow_parent_loop_1_fu_145_m_axi_pMemPort_ARLOCK,
        m_axi_pMemPort_ARCACHE => grp_dataflow_parent_loop_1_fu_145_m_axi_pMemPort_ARCACHE,
        m_axi_pMemPort_ARPROT => grp_dataflow_parent_loop_1_fu_145_m_axi_pMemPort_ARPROT,
        m_axi_pMemPort_ARQOS => grp_dataflow_parent_loop_1_fu_145_m_axi_pMemPort_ARQOS,
        m_axi_pMemPort_ARREGION => grp_dataflow_parent_loop_1_fu_145_m_axi_pMemPort_ARREGION,
        m_axi_pMemPort_ARUSER => grp_dataflow_parent_loop_1_fu_145_m_axi_pMemPort_ARUSER,
        m_axi_pMemPort_RVALID => ap_const_logic_0,
        m_axi_pMemPort_RREADY => grp_dataflow_parent_loop_1_fu_145_m_axi_pMemPort_RREADY,
        m_axi_pMemPort_RDATA => ap_const_lv32_0,
        m_axi_pMemPort_RLAST => ap_const_logic_0,
        m_axi_pMemPort_RID => ap_const_lv1_0,
        m_axi_pMemPort_RUSER => ap_const_lv1_0,
        m_axi_pMemPort_RRESP => ap_const_lv2_0,
        m_axi_pMemPort_BVALID => m_axi_pMemPort_BVALID,
        m_axi_pMemPort_BREADY => grp_dataflow_parent_loop_1_fu_145_m_axi_pMemPort_BREADY,
        m_axi_pMemPort_BRESP => m_axi_pMemPort_BRESP,
        m_axi_pMemPort_BID => m_axi_pMemPort_BID,
        m_axi_pMemPort_BUSER => m_axi_pMemPort_BUSER,
        index => index,
        baseAddr_address0 => grp_dataflow_parent_loop_1_fu_145_baseAddr_address0,
        baseAddr_ce0 => grp_dataflow_parent_loop_1_fu_145_baseAddr_ce0,
        baseAddr_d0 => grp_dataflow_parent_loop_1_fu_145_baseAddr_d0,
        baseAddr_q0 => baseAddr_q0,
        baseAddr_we0 => grp_dataflow_parent_loop_1_fu_145_baseAddr_we0,
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        p_read_ap_vld => ap_const_logic_1,
        r_ap_vld => ap_const_logic_1,
        index_ap_vld => ap_const_logic_1,
        ap_done => grp_dataflow_parent_loop_1_fu_145_ap_done,
        ap_start => grp_dataflow_parent_loop_1_fu_145_ap_start,
        ap_ready => grp_dataflow_parent_loop_1_fu_145_ap_ready,
        ap_idle => grp_dataflow_parent_loop_1_fu_145_ap_idle,
        ap_continue => grp_dataflow_parent_loop_1_fu_145_ap_continue);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((grp_dataflow_parent_loop_1_fu_145_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_dataflow_parent_loop_1_fu_145_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_dataflow_parent_loop_1_fu_145_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_sync_grp_dataflow_parent_loop_1_fu_145_ap_ready = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
                    ap_reg_grp_dataflow_parent_loop_1_fu_145_ap_start <= ap_const_logic_1;
                elsif ((grp_dataflow_parent_loop_1_fu_145_ap_ready = ap_const_logic_1)) then 
                    ap_reg_grp_dataflow_parent_loop_1_fu_145_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_dataflow_parent_loop_1_fu_145_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_grp_dataflow_parent_loop_1_fu_145_ap_ready <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                    if ((grp_dataflow_parent_loop_1_fu_145_ap_done = ap_const_logic_1)) then 
                        ap_sync_reg_grp_dataflow_parent_loop_1_fu_145_ap_ready <= ap_const_logic_0;
                    elsif ((grp_dataflow_parent_loop_1_fu_145_ap_ready = ap_const_logic_1)) then 
                        ap_sync_reg_grp_dataflow_parent_loop_1_fu_145_ap_ready <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) or (img_cols_V_empty_n = ap_const_logic_0) or (img_rows_V_empty_n = ap_const_logic_0) or (r_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                img_cols_V_read_reg_215 <= img_cols_V_dout;
                local_rows_reg_226 <= img_rows_V_dout;
                n_reg_236 <= n_fu_190_p3;
                r_read_reg_220 <= r_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                index <= n_1_fu_202_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, img_rows_V_empty_n, img_cols_V_empty_n, r_empty_n, grp_dataflow_parent_loop_1_fu_145_ap_done, ap_CS_fsm_state4)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (img_cols_V_empty_n = ap_const_logic_0) or (img_rows_V_empty_n = ap_const_logic_0) or (r_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((grp_dataflow_parent_loop_1_fu_145_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, img_rows_V_empty_n, img_cols_V_empty_n, r_empty_n)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (img_cols_V_empty_n = ap_const_logic_0) or (img_rows_V_empty_n = ap_const_logic_0) or (r_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, grp_dataflow_parent_loop_1_fu_145_ap_done, ap_CS_fsm_state4)
    begin
        if (((grp_dataflow_parent_loop_1_fu_145_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_dataflow_parent_loop_1_fu_145_ap_done, ap_CS_fsm_state4)
    begin
        if (((grp_dataflow_parent_loop_1_fu_145_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_sync_grp_dataflow_parent_loop_1_fu_145_ap_ready_assign_proc : process(grp_dataflow_parent_loop_1_fu_145_ap_ready, ap_sync_reg_grp_dataflow_parent_loop_1_fu_145_ap_ready)
    begin
        if ((ap_sync_reg_grp_dataflow_parent_loop_1_fu_145_ap_ready = ap_const_logic_0)) then 
            ap_sync_grp_dataflow_parent_loop_1_fu_145_ap_ready <= grp_dataflow_parent_loop_1_fu_145_ap_ready;
        else 
            ap_sync_grp_dataflow_parent_loop_1_fu_145_ap_ready <= ap_const_logic_1;
        end if; 
    end process;

    baseAddr_address0 <= grp_dataflow_parent_loop_1_fu_145_baseAddr_address0;
    baseAddr_ce0 <= grp_dataflow_parent_loop_1_fu_145_baseAddr_ce0;

    grp_dataflow_parent_loop_1_fu_145_ap_continue_assign_proc : process(grp_dataflow_parent_loop_1_fu_145_ap_done, ap_CS_fsm_state4)
    begin
        if (((grp_dataflow_parent_loop_1_fu_145_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            grp_dataflow_parent_loop_1_fu_145_ap_continue <= ap_const_logic_1;
        else 
            grp_dataflow_parent_loop_1_fu_145_ap_continue <= ap_const_logic_0;
        end if; 
    end process;

    grp_dataflow_parent_loop_1_fu_145_ap_start <= ap_reg_grp_dataflow_parent_loop_1_fu_145_ap_start;
    icmp_fu_178_p2 <= "1" when (signed(tmp_fu_168_p4) < signed(ap_const_lv31_1)) else "0";

    img_cols_V_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, img_cols_V_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            img_cols_V_blk_n <= img_cols_V_empty_n;
        else 
            img_cols_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    img_cols_V_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, img_rows_V_empty_n, img_cols_V_empty_n, r_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (img_cols_V_empty_n = ap_const_logic_0) or (img_rows_V_empty_n = ap_const_logic_0) or (r_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            img_cols_V_read <= ap_const_logic_1;
        else 
            img_cols_V_read <= ap_const_logic_0;
        end if; 
    end process;


    img_data_stream_0_V_read_assign_proc : process(grp_dataflow_parent_loop_1_fu_145_img_data_stream_0_V_read, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            img_data_stream_0_V_read <= grp_dataflow_parent_loop_1_fu_145_img_data_stream_0_V_read;
        else 
            img_data_stream_0_V_read <= ap_const_logic_0;
        end if; 
    end process;


    img_data_stream_1_V_read_assign_proc : process(grp_dataflow_parent_loop_1_fu_145_img_data_stream_1_V_read, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            img_data_stream_1_V_read <= grp_dataflow_parent_loop_1_fu_145_img_data_stream_1_V_read;
        else 
            img_data_stream_1_V_read <= ap_const_logic_0;
        end if; 
    end process;


    img_data_stream_2_V_read_assign_proc : process(grp_dataflow_parent_loop_1_fu_145_img_data_stream_2_V_read, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            img_data_stream_2_V_read <= grp_dataflow_parent_loop_1_fu_145_img_data_stream_2_V_read;
        else 
            img_data_stream_2_V_read <= ap_const_logic_0;
        end if; 
    end process;


    img_rows_V_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, img_rows_V_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            img_rows_V_blk_n <= img_rows_V_empty_n;
        else 
            img_rows_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    img_rows_V_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, img_rows_V_empty_n, img_cols_V_empty_n, r_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (img_cols_V_empty_n = ap_const_logic_0) or (img_rows_V_empty_n = ap_const_logic_0) or (r_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            img_rows_V_read <= ap_const_logic_1;
        else 
            img_rows_V_read <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_pMemPort_ARADDR <= ap_const_lv32_0;
    m_axi_pMemPort_ARBURST <= ap_const_lv2_0;
    m_axi_pMemPort_ARCACHE <= ap_const_lv4_0;
    m_axi_pMemPort_ARID <= ap_const_lv1_0;
    m_axi_pMemPort_ARLEN <= ap_const_lv32_0;
    m_axi_pMemPort_ARLOCK <= ap_const_lv2_0;
    m_axi_pMemPort_ARPROT <= ap_const_lv3_0;
    m_axi_pMemPort_ARQOS <= ap_const_lv4_0;
    m_axi_pMemPort_ARREGION <= ap_const_lv4_0;
    m_axi_pMemPort_ARSIZE <= ap_const_lv3_0;
    m_axi_pMemPort_ARUSER <= ap_const_lv1_0;
    m_axi_pMemPort_ARVALID <= ap_const_logic_0;
    m_axi_pMemPort_AWADDR <= grp_dataflow_parent_loop_1_fu_145_m_axi_pMemPort_AWADDR;
    m_axi_pMemPort_AWBURST <= grp_dataflow_parent_loop_1_fu_145_m_axi_pMemPort_AWBURST;
    m_axi_pMemPort_AWCACHE <= grp_dataflow_parent_loop_1_fu_145_m_axi_pMemPort_AWCACHE;
    m_axi_pMemPort_AWID <= grp_dataflow_parent_loop_1_fu_145_m_axi_pMemPort_AWID;
    m_axi_pMemPort_AWLEN <= grp_dataflow_parent_loop_1_fu_145_m_axi_pMemPort_AWLEN;
    m_axi_pMemPort_AWLOCK <= grp_dataflow_parent_loop_1_fu_145_m_axi_pMemPort_AWLOCK;
    m_axi_pMemPort_AWPROT <= grp_dataflow_parent_loop_1_fu_145_m_axi_pMemPort_AWPROT;
    m_axi_pMemPort_AWQOS <= grp_dataflow_parent_loop_1_fu_145_m_axi_pMemPort_AWQOS;
    m_axi_pMemPort_AWREGION <= grp_dataflow_parent_loop_1_fu_145_m_axi_pMemPort_AWREGION;
    m_axi_pMemPort_AWSIZE <= grp_dataflow_parent_loop_1_fu_145_m_axi_pMemPort_AWSIZE;
    m_axi_pMemPort_AWUSER <= grp_dataflow_parent_loop_1_fu_145_m_axi_pMemPort_AWUSER;

    m_axi_pMemPort_AWVALID_assign_proc : process(grp_dataflow_parent_loop_1_fu_145_m_axi_pMemPort_AWVALID, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            m_axi_pMemPort_AWVALID <= grp_dataflow_parent_loop_1_fu_145_m_axi_pMemPort_AWVALID;
        else 
            m_axi_pMemPort_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_pMemPort_BREADY_assign_proc : process(grp_dataflow_parent_loop_1_fu_145_m_axi_pMemPort_BREADY, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            m_axi_pMemPort_BREADY <= grp_dataflow_parent_loop_1_fu_145_m_axi_pMemPort_BREADY;
        else 
            m_axi_pMemPort_BREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_pMemPort_RREADY <= ap_const_logic_0;
    m_axi_pMemPort_WDATA <= grp_dataflow_parent_loop_1_fu_145_m_axi_pMemPort_WDATA;
    m_axi_pMemPort_WID <= grp_dataflow_parent_loop_1_fu_145_m_axi_pMemPort_WID;
    m_axi_pMemPort_WLAST <= grp_dataflow_parent_loop_1_fu_145_m_axi_pMemPort_WLAST;
    m_axi_pMemPort_WSTRB <= grp_dataflow_parent_loop_1_fu_145_m_axi_pMemPort_WSTRB;
    m_axi_pMemPort_WUSER <= grp_dataflow_parent_loop_1_fu_145_m_axi_pMemPort_WUSER;

    m_axi_pMemPort_WVALID_assign_proc : process(grp_dataflow_parent_loop_1_fu_145_m_axi_pMemPort_WVALID, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            m_axi_pMemPort_WVALID <= grp_dataflow_parent_loop_1_fu_145_m_axi_pMemPort_WVALID;
        else 
            m_axi_pMemPort_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    n_1_fu_202_p3 <= 
        index when (tmp_i_fu_198_p2(0) = '1') else 
        n_reg_236;
    n_fu_190_p3 <= 
        tmp_9_i_fu_184_p2 when (icmp_fu_178_p2(0) = '1') else 
        ap_const_lv32_0;

    r_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, r_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            r_blk_n <= r_empty_n;
        else 
            r_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    r_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, img_rows_V_empty_n, img_cols_V_empty_n, r_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (img_cols_V_empty_n = ap_const_logic_0) or (img_rows_V_empty_n = ap_const_logic_0) or (r_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            r_read <= ap_const_logic_1;
        else 
            r_read <= ap_const_logic_0;
        end if; 
    end process;

    tmp_9_i_fu_184_p2 <= std_logic_vector(unsigned(index) + unsigned(ap_const_lv32_1));
    tmp_fu_168_p4 <= index(31 downto 1);
    tmp_i_fu_198_p2 <= "1" when (n_reg_236 = r_read_reg_220) else "0";
    w <= 
        index when (tmp_i_fu_198_p2(0) = '1') else 
        n_reg_236;

    w_ap_vld_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            w_ap_vld <= ap_const_logic_1;
        else 
            w_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

end behav;
