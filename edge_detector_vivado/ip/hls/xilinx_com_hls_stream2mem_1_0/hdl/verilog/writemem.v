// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module writemem (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        m_axi_pMemPort_AWVALID,
        m_axi_pMemPort_AWREADY,
        m_axi_pMemPort_AWADDR,
        m_axi_pMemPort_AWID,
        m_axi_pMemPort_AWLEN,
        m_axi_pMemPort_AWSIZE,
        m_axi_pMemPort_AWBURST,
        m_axi_pMemPort_AWLOCK,
        m_axi_pMemPort_AWCACHE,
        m_axi_pMemPort_AWPROT,
        m_axi_pMemPort_AWQOS,
        m_axi_pMemPort_AWREGION,
        m_axi_pMemPort_AWUSER,
        m_axi_pMemPort_WVALID,
        m_axi_pMemPort_WREADY,
        m_axi_pMemPort_WDATA,
        m_axi_pMemPort_WSTRB,
        m_axi_pMemPort_WLAST,
        m_axi_pMemPort_WID,
        m_axi_pMemPort_WUSER,
        m_axi_pMemPort_ARVALID,
        m_axi_pMemPort_ARREADY,
        m_axi_pMemPort_ARADDR,
        m_axi_pMemPort_ARID,
        m_axi_pMemPort_ARLEN,
        m_axi_pMemPort_ARSIZE,
        m_axi_pMemPort_ARBURST,
        m_axi_pMemPort_ARLOCK,
        m_axi_pMemPort_ARCACHE,
        m_axi_pMemPort_ARPROT,
        m_axi_pMemPort_ARQOS,
        m_axi_pMemPort_ARREGION,
        m_axi_pMemPort_ARUSER,
        m_axi_pMemPort_RVALID,
        m_axi_pMemPort_RREADY,
        m_axi_pMemPort_RDATA,
        m_axi_pMemPort_RLAST,
        m_axi_pMemPort_RID,
        m_axi_pMemPort_RUSER,
        m_axi_pMemPort_RRESP,
        m_axi_pMemPort_BVALID,
        m_axi_pMemPort_BREADY,
        m_axi_pMemPort_BRESP,
        m_axi_pMemPort_BID,
        m_axi_pMemPort_BUSER,
        img_cols_V_dout,
        img_cols_V_empty_n,
        img_cols_V_read,
        row_dout,
        row_empty_n,
        row_read,
        index_dout,
        index_empty_n,
        index_read,
        r_dout,
        r_empty_n,
        r_read,
        from_dout,
        from_empty_n,
        from_read,
        baseAddr_address0,
        baseAddr_ce0,
        baseAddr_q0
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_state3 = 11'd4;
parameter    ap_ST_fsm_state4 = 11'd8;
parameter    ap_ST_fsm_state5 = 11'd16;
parameter    ap_ST_fsm_pp0_stage0 = 11'd32;
parameter    ap_ST_fsm_state9 = 11'd64;
parameter    ap_ST_fsm_state10 = 11'd128;
parameter    ap_ST_fsm_state11 = 11'd256;
parameter    ap_ST_fsm_state12 = 11'd512;
parameter    ap_ST_fsm_state13 = 11'd1024;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   m_axi_pMemPort_AWVALID;
input   m_axi_pMemPort_AWREADY;
output  [31:0] m_axi_pMemPort_AWADDR;
output  [0:0] m_axi_pMemPort_AWID;
output  [31:0] m_axi_pMemPort_AWLEN;
output  [2:0] m_axi_pMemPort_AWSIZE;
output  [1:0] m_axi_pMemPort_AWBURST;
output  [1:0] m_axi_pMemPort_AWLOCK;
output  [3:0] m_axi_pMemPort_AWCACHE;
output  [2:0] m_axi_pMemPort_AWPROT;
output  [3:0] m_axi_pMemPort_AWQOS;
output  [3:0] m_axi_pMemPort_AWREGION;
output  [0:0] m_axi_pMemPort_AWUSER;
output   m_axi_pMemPort_WVALID;
input   m_axi_pMemPort_WREADY;
output  [31:0] m_axi_pMemPort_WDATA;
output  [3:0] m_axi_pMemPort_WSTRB;
output   m_axi_pMemPort_WLAST;
output  [0:0] m_axi_pMemPort_WID;
output  [0:0] m_axi_pMemPort_WUSER;
output   m_axi_pMemPort_ARVALID;
input   m_axi_pMemPort_ARREADY;
output  [31:0] m_axi_pMemPort_ARADDR;
output  [0:0] m_axi_pMemPort_ARID;
output  [31:0] m_axi_pMemPort_ARLEN;
output  [2:0] m_axi_pMemPort_ARSIZE;
output  [1:0] m_axi_pMemPort_ARBURST;
output  [1:0] m_axi_pMemPort_ARLOCK;
output  [3:0] m_axi_pMemPort_ARCACHE;
output  [2:0] m_axi_pMemPort_ARPROT;
output  [3:0] m_axi_pMemPort_ARQOS;
output  [3:0] m_axi_pMemPort_ARREGION;
output  [0:0] m_axi_pMemPort_ARUSER;
input   m_axi_pMemPort_RVALID;
output   m_axi_pMemPort_RREADY;
input  [31:0] m_axi_pMemPort_RDATA;
input   m_axi_pMemPort_RLAST;
input  [0:0] m_axi_pMemPort_RID;
input  [0:0] m_axi_pMemPort_RUSER;
input  [1:0] m_axi_pMemPort_RRESP;
input   m_axi_pMemPort_BVALID;
output   m_axi_pMemPort_BREADY;
input  [1:0] m_axi_pMemPort_BRESP;
input  [0:0] m_axi_pMemPort_BID;
input  [0:0] m_axi_pMemPort_BUSER;
input  [31:0] img_cols_V_dout;
input   img_cols_V_empty_n;
output   img_cols_V_read;
input  [30:0] row_dout;
input   row_empty_n;
output   row_read;
input  [31:0] index_dout;
input   index_empty_n;
output   index_read;
input  [31:0] r_dout;
input   r_empty_n;
output   r_read;
input  [31:0] from_dout;
input   from_empty_n;
output   from_read;
output  [1:0] baseAddr_address0;
output   baseAddr_ce0;
input  [31:0] baseAddr_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_pMemPort_AWVALID;
reg m_axi_pMemPort_WVALID;
reg m_axi_pMemPort_BREADY;
reg img_cols_V_read;
reg row_read;
reg index_read;
reg r_read;
reg from_read;
reg baseAddr_ce0;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    pMemPort_blk_n_AW;
wire    ap_CS_fsm_state5;
reg    pMemPort_blk_n_W;
reg    ap_enable_reg_pp0_iter2;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond_i_i_reg_451;
reg   [0:0] ap_reg_pp0_iter1_exitcond_i_i_reg_451;
reg    pMemPort_blk_n_B;
wire    ap_CS_fsm_state13;
reg   [0:0] tmp_i1_i_reg_441;
reg    img_cols_V_blk_n;
reg    row_blk_n;
reg    index_blk_n;
reg    r_blk_n;
reg    from_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
reg   [28:0] indvar_i_i_reg_213;
reg   [30:0] row_read_reg_379;
reg    ap_block_state1;
reg   [31:0] r_read_reg_384;
reg  signed [31:0] line_len_i_i_reg_389;
reg   [31:0] index_read_reg_394;
wire   [0:0] icmp_fu_266_p2;
reg   [0:0] icmp_reg_399;
wire   [31:0] tmp_9_i_i_fu_272_p2;
reg   [31:0] tmp_9_i_i_reg_404;
reg   [29:0] tmp_1_reg_409;
wire    ap_CS_fsm_state2;
wire   [31:0] n_1_i_i_fu_307_p3;
reg   [31:0] n_1_i_i_reg_421;
wire   [31:0] grp_fu_291_p2;
reg   [31:0] tmp_7_i_i_reg_426;
wire    ap_CS_fsm_state3;
wire   [31:0] to_assign_fu_332_p2;
reg   [31:0] to_assign_reg_436;
wire    ap_CS_fsm_state4;
wire   [0:0] tmp_i1_i_fu_344_p2;
reg    ap_sig_ioackin_m_axi_pMemPort_AWREADY;
wire   [0:0] exitcond_i_i_fu_368_p2;
wire    ap_block_state6_pp0_stage0_iter0;
reg    ap_block_state7_pp0_stage0_iter1;
wire    ap_block_state8_pp0_stage0_iter2;
reg    ap_sig_ioackin_m_axi_pMemPort_WREADY;
reg    ap_block_state8_io;
reg    ap_block_pp0_stage0_11001;
wire   [28:0] indvar_next_i_i_fu_373_p2;
reg    ap_enable_reg_pp0_iter0;
reg   [31:0] from_read_reg_460;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state6;
wire  signed [63:0] tmp_5_i_i_fu_314_p1;
wire   [63:0] tmp_1_i2_i_fu_350_p1;
reg    ap_reg_ioackin_m_axi_pMemPort_AWREADY;
reg    ap_block_state13;
reg    ap_reg_ioackin_m_axi_pMemPort_WREADY;
reg    ap_block_pp0_stage0_01001;
wire   [33:0] p_shl_i_i_fu_224_p3;
wire   [34:0] p_shl_cast_i_i_fu_232_p1;
wire   [34:0] lhs_V_cast111_i_i_fu_236_p1;
wire   [34:0] r_V_i_i_fu_240_p2;
wire   [30:0] tmp_3_fu_256_p4;
wire   [30:0] grp_fu_291_p0;
wire   [31:0] n_i_i_fu_296_p3;
wire   [0:0] tmp_i_i_fu_302_p2;
wire   [29:0] tmp_6_i_i_fu_318_p4;
wire   [31:0] tmp_fu_328_p1;
wire   [31:0] len_assign_fu_337_p3;
wire   [29:0] indvar_cast_i_i_fu_364_p1;
reg   [10:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [31:0] grp_fu_291_p00;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 11'd1;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_reg_ioackin_m_axi_pMemPort_AWREADY = 1'b0;
#0 ap_reg_ioackin_m_axi_pMemPort_WREADY = 1'b0;
end

stream2mem_mul_31bkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 31 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
stream2mem_mul_31bkb_U33(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_291_p0),
    .din1(line_len_i_i_reg_389),
    .ce(1'b1),
    .dout(grp_fu_291_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((m_axi_pMemPort_BVALID == 1'b0) & (tmp_i1_i_reg_441 == 1'd1)) & (1'b1 == ap_CS_fsm_state13))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state6) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_sig_ioackin_m_axi_pMemPort_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state6)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state6);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((ap_sig_ioackin_m_axi_pMemPort_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_pMemPort_AWREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state5)) begin
            if ((ap_sig_ioackin_m_axi_pMemPort_AWREADY == 1'b1)) begin
                ap_reg_ioackin_m_axi_pMemPort_AWREADY <= 1'b0;
            end else if ((m_axi_pMemPort_AWREADY == 1'b1)) begin
                ap_reg_ioackin_m_axi_pMemPort_AWREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_pMemPort_WREADY <= 1'b0;
    end else begin
        if (((ap_reg_pp0_iter1_exitcond_i_i_reg_451 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
            if ((1'b0 == ap_block_pp0_stage0_11001)) begin
                ap_reg_ioackin_m_axi_pMemPort_WREADY <= 1'b0;
            end else if (((1'b0 == ap_block_pp0_stage0_01001) & (m_axi_pMemPort_WREADY == 1'b1))) begin
                ap_reg_ioackin_m_axi_pMemPort_WREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_i_i_fu_368_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_i_i_reg_213 <= indvar_next_i_i_fu_373_p2;
    end else if (((ap_sig_ioackin_m_axi_pMemPort_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        indvar_i_i_reg_213 <= 29'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_reg_pp0_iter1_exitcond_i_i_reg_451 <= exitcond_i_i_reg_451;
        exitcond_i_i_reg_451 <= exitcond_i_i_fu_368_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_i_i_reg_451 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        from_read_reg_460 <= from_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((~((index_empty_n == 1'b0) | (row_empty_n == 1'b0) | (img_cols_V_empty_n == 1'b0) | (ap_start == 1'b0) | (r_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        icmp_reg_399 <= icmp_fu_266_p2;
        index_read_reg_394 <= index_dout;
        line_len_i_i_reg_389 <= {{r_V_i_i_fu_240_p2[33:2]}};
        r_read_reg_384 <= r_dout;
        row_read_reg_379 <= row_dout;
        tmp_1_reg_409 <= {{r_V_i_i_fu_240_p2[31:2]}};
        tmp_9_i_i_reg_404 <= tmp_9_i_i_fu_272_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        n_1_i_i_reg_421 <= n_1_i_i_fu_307_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        tmp_7_i_i_reg_426 <= grp_fu_291_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        tmp_i1_i_reg_441 <= tmp_i1_i_fu_344_p2;
        to_assign_reg_436 <= to_assign_fu_332_p2;
    end
end

always @ (*) begin
    if ((exitcond_i_i_fu_368_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state6 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state6 = 1'b0;
    end
end

always @ (*) begin
    if ((~((m_axi_pMemPort_BVALID == 1'b0) & (tmp_i1_i_reg_441 == 1'd1)) & (1'b1 == ap_CS_fsm_state13))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((m_axi_pMemPort_BVALID == 1'b0) & (tmp_i1_i_reg_441 == 1'd1)) & (1'b1 == ap_CS_fsm_state13))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_m_axi_pMemPort_AWREADY == 1'b0)) begin
        ap_sig_ioackin_m_axi_pMemPort_AWREADY = m_axi_pMemPort_AWREADY;
    end else begin
        ap_sig_ioackin_m_axi_pMemPort_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_m_axi_pMemPort_WREADY == 1'b0)) begin
        ap_sig_ioackin_m_axi_pMemPort_WREADY = m_axi_pMemPort_WREADY;
    end else begin
        ap_sig_ioackin_m_axi_pMemPort_WREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        baseAddr_ce0 = 1'b1;
    end else begin
        baseAddr_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_i_i_reg_451 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        from_blk_n = from_empty_n;
    end else begin
        from_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_i_i_reg_451 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        from_read = 1'b1;
    end else begin
        from_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        img_cols_V_blk_n = img_cols_V_empty_n;
    end else begin
        img_cols_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((index_empty_n == 1'b0) | (row_empty_n == 1'b0) | (img_cols_V_empty_n == 1'b0) | (ap_start == 1'b0) | (r_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        img_cols_V_read = 1'b1;
    end else begin
        img_cols_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        index_blk_n = index_empty_n;
    end else begin
        index_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((index_empty_n == 1'b0) | (row_empty_n == 1'b0) | (img_cols_V_empty_n == 1'b0) | (ap_start == 1'b0) | (r_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        index_read = 1'b1;
    end else begin
        index_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_m_axi_pMemPort_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state5))) begin
        m_axi_pMemPort_AWVALID = 1'b1;
    end else begin
        m_axi_pMemPort_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if ((~((m_axi_pMemPort_BVALID == 1'b0) & (tmp_i1_i_reg_441 == 1'd1)) & (1'b1 == ap_CS_fsm_state13) & (tmp_i1_i_reg_441 == 1'd1))) begin
        m_axi_pMemPort_BREADY = 1'b1;
    end else begin
        m_axi_pMemPort_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_pp0_iter1_exitcond_i_i_reg_451 == 1'd0) & (ap_reg_ioackin_m_axi_pMemPort_WREADY == 1'b0) & (1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        m_axi_pMemPort_WVALID = 1'b1;
    end else begin
        m_axi_pMemPort_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        pMemPort_blk_n_AW = m_axi_pMemPort_AWREADY;
    end else begin
        pMemPort_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) & (tmp_i1_i_reg_441 == 1'd1))) begin
        pMemPort_blk_n_B = m_axi_pMemPort_BVALID;
    end else begin
        pMemPort_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((ap_reg_pp0_iter1_exitcond_i_i_reg_451 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        pMemPort_blk_n_W = m_axi_pMemPort_WREADY;
    end else begin
        pMemPort_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        r_blk_n = r_empty_n;
    end else begin
        r_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((index_empty_n == 1'b0) | (row_empty_n == 1'b0) | (img_cols_V_empty_n == 1'b0) | (ap_start == 1'b0) | (r_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        r_read = 1'b1;
    end else begin
        r_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        row_blk_n = row_empty_n;
    end else begin
        row_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((index_empty_n == 1'b0) | (row_empty_n == 1'b0) | (img_cols_V_empty_n == 1'b0) | (ap_start == 1'b0) | (r_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        row_read = 1'b1;
    end else begin
        row_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((index_empty_n == 1'b0) | (row_empty_n == 1'b0) | (img_cols_V_empty_n == 1'b0) | (ap_start == 1'b0) | (r_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((tmp_i1_i_fu_344_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((ap_sig_ioackin_m_axi_pMemPort_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (exitcond_i_i_fu_368_p2 == 1'd1)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (exitcond_i_i_fu_368_p2 == 1'd1)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            if ((~((m_axi_pMemPort_BVALID == 1'b0) & (tmp_i1_i_reg_441 == 1'd1)) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((exitcond_i_i_reg_451 == 1'd0) & (from_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((exitcond_i_i_reg_451 == 1'd0) & (from_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'b1 == ap_block_state8_io) & (ap_enable_reg_pp0_iter2 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((exitcond_i_i_reg_451 == 1'd0) & (from_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'b1 == ap_block_state8_io) & (ap_enable_reg_pp0_iter2 == 1'b1)));
end

always @ (*) begin
    ap_block_state1 = ((index_empty_n == 1'b0) | (row_empty_n == 1'b0) | (img_cols_V_empty_n == 1'b0) | (ap_start == 1'b0) | (r_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state13 = ((m_axi_pMemPort_BVALID == 1'b0) & (tmp_i1_i_reg_441 == 1'd1));
end

assign ap_block_state6_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state7_pp0_stage0_iter1 = ((exitcond_i_i_reg_451 == 1'd0) & (from_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state8_io = ((ap_reg_pp0_iter1_exitcond_i_i_reg_451 == 1'd0) & (ap_sig_ioackin_m_axi_pMemPort_WREADY == 1'b0));
end

assign ap_block_state8_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign baseAddr_address0 = tmp_5_i_i_fu_314_p1;

assign exitcond_i_i_fu_368_p2 = ((indvar_cast_i_i_fu_364_p1 == tmp_1_reg_409) ? 1'b1 : 1'b0);

assign grp_fu_291_p0 = grp_fu_291_p00;

assign grp_fu_291_p00 = row_read_reg_379;

assign icmp_fu_266_p2 = (($signed(tmp_3_fu_256_p4) < $signed(31'd1)) ? 1'b1 : 1'b0);

assign indvar_cast_i_i_fu_364_p1 = indvar_i_i_reg_213;

assign indvar_next_i_i_fu_373_p2 = (indvar_i_i_reg_213 + 29'd1);

assign len_assign_fu_337_p3 = {{tmp_1_reg_409}, {2'd0}};

assign lhs_V_cast111_i_i_fu_236_p1 = img_cols_V_dout;

assign m_axi_pMemPort_ARADDR = 32'd0;

assign m_axi_pMemPort_ARBURST = 2'd0;

assign m_axi_pMemPort_ARCACHE = 4'd0;

assign m_axi_pMemPort_ARID = 1'd0;

assign m_axi_pMemPort_ARLEN = 32'd0;

assign m_axi_pMemPort_ARLOCK = 2'd0;

assign m_axi_pMemPort_ARPROT = 3'd0;

assign m_axi_pMemPort_ARQOS = 4'd0;

assign m_axi_pMemPort_ARREGION = 4'd0;

assign m_axi_pMemPort_ARSIZE = 3'd0;

assign m_axi_pMemPort_ARUSER = 1'd0;

assign m_axi_pMemPort_ARVALID = 1'b0;

assign m_axi_pMemPort_AWADDR = tmp_1_i2_i_fu_350_p1;

assign m_axi_pMemPort_AWBURST = 2'd0;

assign m_axi_pMemPort_AWCACHE = 4'd0;

assign m_axi_pMemPort_AWID = 1'd0;

assign m_axi_pMemPort_AWLEN = tmp_1_reg_409;

assign m_axi_pMemPort_AWLOCK = 2'd0;

assign m_axi_pMemPort_AWPROT = 3'd0;

assign m_axi_pMemPort_AWQOS = 4'd0;

assign m_axi_pMemPort_AWREGION = 4'd0;

assign m_axi_pMemPort_AWSIZE = 3'd0;

assign m_axi_pMemPort_AWUSER = 1'd0;

assign m_axi_pMemPort_RREADY = 1'b0;

assign m_axi_pMemPort_WDATA = from_read_reg_460;

assign m_axi_pMemPort_WID = 1'd0;

assign m_axi_pMemPort_WLAST = 1'b0;

assign m_axi_pMemPort_WSTRB = 4'd15;

assign m_axi_pMemPort_WUSER = 1'd0;

assign n_1_i_i_fu_307_p3 = ((tmp_i_i_fu_302_p2[0:0] === 1'b1) ? index_read_reg_394 : n_i_i_fu_296_p3);

assign n_i_i_fu_296_p3 = ((icmp_reg_399[0:0] === 1'b1) ? tmp_9_i_i_reg_404 : 32'd0);

assign p_shl_cast_i_i_fu_232_p1 = p_shl_i_i_fu_224_p3;

assign p_shl_i_i_fu_224_p3 = {{img_cols_V_dout}, {2'd0}};

assign r_V_i_i_fu_240_p2 = (p_shl_cast_i_i_fu_232_p1 - lhs_V_cast111_i_i_fu_236_p1);

assign tmp_1_i2_i_fu_350_p1 = to_assign_reg_436;

assign tmp_3_fu_256_p4 = {{index_dout[31:1]}};

assign tmp_5_i_i_fu_314_p1 = $signed(n_1_i_i_reg_421);

assign tmp_6_i_i_fu_318_p4 = {{baseAddr_q0[31:2]}};

assign tmp_9_i_i_fu_272_p2 = (index_dout + 32'd1);

assign tmp_fu_328_p1 = tmp_6_i_i_fu_318_p4;

assign tmp_i1_i_fu_344_p2 = (($signed(len_assign_fu_337_p3) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign tmp_i_i_fu_302_p2 = ((n_i_i_fu_296_p3 == r_read_reg_384) ? 1'b1 : 1'b0);

assign to_assign_fu_332_p2 = (tmp_7_i_i_reg_426 + tmp_fu_328_p1);

endmodule //writemem
