-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dataflow_parent_loop_1 is
port (
    local_rows : IN STD_LOGIC_VECTOR (31 downto 0);
    w : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_pMemPort_AWVALID : OUT STD_LOGIC;
    m_axi_pMemPort_AWREADY : IN STD_LOGIC;
    m_axi_pMemPort_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_pMemPort_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_pMemPort_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_pMemPort_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_pMemPort_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_pMemPort_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_pMemPort_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_pMemPort_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_pMemPort_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_pMemPort_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_pMemPort_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_pMemPort_WVALID : OUT STD_LOGIC;
    m_axi_pMemPort_WREADY : IN STD_LOGIC;
    m_axi_pMemPort_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_pMemPort_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_pMemPort_WLAST : OUT STD_LOGIC;
    m_axi_pMemPort_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_pMemPort_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_pMemPort_ARVALID : OUT STD_LOGIC;
    m_axi_pMemPort_ARREADY : IN STD_LOGIC;
    m_axi_pMemPort_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_pMemPort_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_pMemPort_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_pMemPort_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_pMemPort_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_pMemPort_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_pMemPort_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_pMemPort_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_pMemPort_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_pMemPort_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_pMemPort_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_pMemPort_RVALID : IN STD_LOGIC;
    m_axi_pMemPort_RREADY : OUT STD_LOGIC;
    m_axi_pMemPort_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_pMemPort_RLAST : IN STD_LOGIC;
    m_axi_pMemPort_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_pMemPort_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_pMemPort_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_pMemPort_BVALID : IN STD_LOGIC;
    m_axi_pMemPort_BREADY : OUT STD_LOGIC;
    m_axi_pMemPort_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_pMemPort_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_pMemPort_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    p_read : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (31 downto 0);
    img_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    img_data_stream_0_V_full_n : IN STD_LOGIC;
    img_data_stream_0_V_write : OUT STD_LOGIC;
    img_data_stream_1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    img_data_stream_1_V_full_n : IN STD_LOGIC;
    img_data_stream_1_V_write : OUT STD_LOGIC;
    img_data_stream_2_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    img_data_stream_2_V_full_n : IN STD_LOGIC;
    img_data_stream_2_V_write : OUT STD_LOGIC;
    index : IN STD_LOGIC_VECTOR (31 downto 0);
    baseAddr_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    baseAddr_ce0 : OUT STD_LOGIC;
    baseAddr_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    baseAddr_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    baseAddr_we0 : OUT STD_LOGIC;
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    w_ap_vld : IN STD_LOGIC;
    p_read_ap_vld : IN STD_LOGIC;
    p_read1_ap_vld : IN STD_LOGIC;
    index_ap_vld : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC );
end;


architecture behav of dataflow_parent_loop_1 is 
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";

    signal dataflow_in_loop_U0_m_axi_pMemPort_AWVALID : STD_LOGIC;
    signal dataflow_in_loop_U0_m_axi_pMemPort_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal dataflow_in_loop_U0_m_axi_pMemPort_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal dataflow_in_loop_U0_m_axi_pMemPort_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal dataflow_in_loop_U0_m_axi_pMemPort_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal dataflow_in_loop_U0_m_axi_pMemPort_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal dataflow_in_loop_U0_m_axi_pMemPort_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal dataflow_in_loop_U0_m_axi_pMemPort_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal dataflow_in_loop_U0_m_axi_pMemPort_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal dataflow_in_loop_U0_m_axi_pMemPort_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal dataflow_in_loop_U0_m_axi_pMemPort_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal dataflow_in_loop_U0_m_axi_pMemPort_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal dataflow_in_loop_U0_m_axi_pMemPort_WVALID : STD_LOGIC;
    signal dataflow_in_loop_U0_m_axi_pMemPort_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal dataflow_in_loop_U0_m_axi_pMemPort_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal dataflow_in_loop_U0_m_axi_pMemPort_WLAST : STD_LOGIC;
    signal dataflow_in_loop_U0_m_axi_pMemPort_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal dataflow_in_loop_U0_m_axi_pMemPort_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal dataflow_in_loop_U0_m_axi_pMemPort_ARVALID : STD_LOGIC;
    signal dataflow_in_loop_U0_m_axi_pMemPort_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal dataflow_in_loop_U0_m_axi_pMemPort_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal dataflow_in_loop_U0_m_axi_pMemPort_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal dataflow_in_loop_U0_m_axi_pMemPort_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal dataflow_in_loop_U0_m_axi_pMemPort_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal dataflow_in_loop_U0_m_axi_pMemPort_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal dataflow_in_loop_U0_m_axi_pMemPort_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal dataflow_in_loop_U0_m_axi_pMemPort_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal dataflow_in_loop_U0_m_axi_pMemPort_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal dataflow_in_loop_U0_m_axi_pMemPort_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal dataflow_in_loop_U0_m_axi_pMemPort_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal dataflow_in_loop_U0_m_axi_pMemPort_RREADY : STD_LOGIC;
    signal dataflow_in_loop_U0_m_axi_pMemPort_BREADY : STD_LOGIC;
    signal dataflow_in_loop_U0_row : STD_LOGIC_VECTOR (30 downto 0);
    signal dataflow_in_loop_U0_img_data_stream_0_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal dataflow_in_loop_U0_img_data_stream_0_V_write : STD_LOGIC;
    signal dataflow_in_loop_U0_img_data_stream_1_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal dataflow_in_loop_U0_img_data_stream_1_V_write : STD_LOGIC;
    signal dataflow_in_loop_U0_img_data_stream_2_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal dataflow_in_loop_U0_img_data_stream_2_V_write : STD_LOGIC;
    signal dataflow_in_loop_U0_baseAddr_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal dataflow_in_loop_U0_baseAddr_ce0 : STD_LOGIC;
    signal dataflow_in_loop_U0_baseAddr_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal dataflow_in_loop_U0_baseAddr_we0 : STD_LOGIC;
    signal dataflow_in_loop_U0_ap_done : STD_LOGIC;
    signal dataflow_in_loop_U0_ap_start : STD_LOGIC;
    signal dataflow_in_loop_U0_ap_ready : STD_LOGIC;
    signal dataflow_in_loop_U0_ap_idle : STD_LOGIC;
    signal dataflow_in_loop_U0_ap_continue : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal loop_dataflow_enable : STD_LOGIC := '0';
    signal loop_dataflow_input_count : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal loop_dataflow_output_count : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal loop_dataflow_busy : STD_LOGIC := '0';
    signal dataflow_in_loop_U0_start_full_n : STD_LOGIC;
    signal dataflow_in_loop_U0_start_write : STD_LOGIC;

    component dataflow_in_loop IS
    port (
        w : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_pMemPort_AWVALID : OUT STD_LOGIC;
        m_axi_pMemPort_AWREADY : IN STD_LOGIC;
        m_axi_pMemPort_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_pMemPort_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_pMemPort_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_pMemPort_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_pMemPort_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_pMemPort_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_pMemPort_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_pMemPort_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_pMemPort_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_pMemPort_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_pMemPort_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_pMemPort_WVALID : OUT STD_LOGIC;
        m_axi_pMemPort_WREADY : IN STD_LOGIC;
        m_axi_pMemPort_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_pMemPort_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_pMemPort_WLAST : OUT STD_LOGIC;
        m_axi_pMemPort_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_pMemPort_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_pMemPort_ARVALID : OUT STD_LOGIC;
        m_axi_pMemPort_ARREADY : IN STD_LOGIC;
        m_axi_pMemPort_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_pMemPort_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_pMemPort_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_pMemPort_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_pMemPort_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_pMemPort_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_pMemPort_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_pMemPort_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_pMemPort_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_pMemPort_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_pMemPort_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_pMemPort_RVALID : IN STD_LOGIC;
        m_axi_pMemPort_RREADY : OUT STD_LOGIC;
        m_axi_pMemPort_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_pMemPort_RLAST : IN STD_LOGIC;
        m_axi_pMemPort_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_pMemPort_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_pMemPort_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_pMemPort_BVALID : IN STD_LOGIC;
        m_axi_pMemPort_BREADY : OUT STD_LOGIC;
        m_axi_pMemPort_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_pMemPort_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_pMemPort_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        row : IN STD_LOGIC_VECTOR (30 downto 0);
        p_read : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (31 downto 0);
        img_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_0_V_full_n : IN STD_LOGIC;
        img_data_stream_0_V_write : OUT STD_LOGIC;
        img_data_stream_1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_1_V_full_n : IN STD_LOGIC;
        img_data_stream_1_V_write : OUT STD_LOGIC;
        img_data_stream_2_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_2_V_full_n : IN STD_LOGIC;
        img_data_stream_2_V_write : OUT STD_LOGIC;
        index : IN STD_LOGIC_VECTOR (31 downto 0);
        baseAddr_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
        baseAddr_ce0 : OUT STD_LOGIC;
        baseAddr_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        baseAddr_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        baseAddr_we0 : OUT STD_LOGIC;
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        w_ap_vld : IN STD_LOGIC;
        row_ap_vld : IN STD_LOGIC;
        p_read_ap_vld : IN STD_LOGIC;
        p_read1_ap_vld : IN STD_LOGIC;
        index_ap_vld : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;



begin
    dataflow_in_loop_U0 : component dataflow_in_loop
    port map (
        w => w,
        m_axi_pMemPort_AWVALID => dataflow_in_loop_U0_m_axi_pMemPort_AWVALID,
        m_axi_pMemPort_AWREADY => ap_const_logic_0,
        m_axi_pMemPort_AWADDR => dataflow_in_loop_U0_m_axi_pMemPort_AWADDR,
        m_axi_pMemPort_AWID => dataflow_in_loop_U0_m_axi_pMemPort_AWID,
        m_axi_pMemPort_AWLEN => dataflow_in_loop_U0_m_axi_pMemPort_AWLEN,
        m_axi_pMemPort_AWSIZE => dataflow_in_loop_U0_m_axi_pMemPort_AWSIZE,
        m_axi_pMemPort_AWBURST => dataflow_in_loop_U0_m_axi_pMemPort_AWBURST,
        m_axi_pMemPort_AWLOCK => dataflow_in_loop_U0_m_axi_pMemPort_AWLOCK,
        m_axi_pMemPort_AWCACHE => dataflow_in_loop_U0_m_axi_pMemPort_AWCACHE,
        m_axi_pMemPort_AWPROT => dataflow_in_loop_U0_m_axi_pMemPort_AWPROT,
        m_axi_pMemPort_AWQOS => dataflow_in_loop_U0_m_axi_pMemPort_AWQOS,
        m_axi_pMemPort_AWREGION => dataflow_in_loop_U0_m_axi_pMemPort_AWREGION,
        m_axi_pMemPort_AWUSER => dataflow_in_loop_U0_m_axi_pMemPort_AWUSER,
        m_axi_pMemPort_WVALID => dataflow_in_loop_U0_m_axi_pMemPort_WVALID,
        m_axi_pMemPort_WREADY => ap_const_logic_0,
        m_axi_pMemPort_WDATA => dataflow_in_loop_U0_m_axi_pMemPort_WDATA,
        m_axi_pMemPort_WSTRB => dataflow_in_loop_U0_m_axi_pMemPort_WSTRB,
        m_axi_pMemPort_WLAST => dataflow_in_loop_U0_m_axi_pMemPort_WLAST,
        m_axi_pMemPort_WID => dataflow_in_loop_U0_m_axi_pMemPort_WID,
        m_axi_pMemPort_WUSER => dataflow_in_loop_U0_m_axi_pMemPort_WUSER,
        m_axi_pMemPort_ARVALID => dataflow_in_loop_U0_m_axi_pMemPort_ARVALID,
        m_axi_pMemPort_ARREADY => m_axi_pMemPort_ARREADY,
        m_axi_pMemPort_ARADDR => dataflow_in_loop_U0_m_axi_pMemPort_ARADDR,
        m_axi_pMemPort_ARID => dataflow_in_loop_U0_m_axi_pMemPort_ARID,
        m_axi_pMemPort_ARLEN => dataflow_in_loop_U0_m_axi_pMemPort_ARLEN,
        m_axi_pMemPort_ARSIZE => dataflow_in_loop_U0_m_axi_pMemPort_ARSIZE,
        m_axi_pMemPort_ARBURST => dataflow_in_loop_U0_m_axi_pMemPort_ARBURST,
        m_axi_pMemPort_ARLOCK => dataflow_in_loop_U0_m_axi_pMemPort_ARLOCK,
        m_axi_pMemPort_ARCACHE => dataflow_in_loop_U0_m_axi_pMemPort_ARCACHE,
        m_axi_pMemPort_ARPROT => dataflow_in_loop_U0_m_axi_pMemPort_ARPROT,
        m_axi_pMemPort_ARQOS => dataflow_in_loop_U0_m_axi_pMemPort_ARQOS,
        m_axi_pMemPort_ARREGION => dataflow_in_loop_U0_m_axi_pMemPort_ARREGION,
        m_axi_pMemPort_ARUSER => dataflow_in_loop_U0_m_axi_pMemPort_ARUSER,
        m_axi_pMemPort_RVALID => m_axi_pMemPort_RVALID,
        m_axi_pMemPort_RREADY => dataflow_in_loop_U0_m_axi_pMemPort_RREADY,
        m_axi_pMemPort_RDATA => m_axi_pMemPort_RDATA,
        m_axi_pMemPort_RLAST => m_axi_pMemPort_RLAST,
        m_axi_pMemPort_RID => m_axi_pMemPort_RID,
        m_axi_pMemPort_RUSER => m_axi_pMemPort_RUSER,
        m_axi_pMemPort_RRESP => m_axi_pMemPort_RRESP,
        m_axi_pMemPort_BVALID => ap_const_logic_0,
        m_axi_pMemPort_BREADY => dataflow_in_loop_U0_m_axi_pMemPort_BREADY,
        m_axi_pMemPort_BRESP => ap_const_lv2_0,
        m_axi_pMemPort_BID => ap_const_lv1_0,
        m_axi_pMemPort_BUSER => ap_const_lv1_0,
        row => dataflow_in_loop_U0_row,
        p_read => p_read,
        p_read1 => p_read1,
        img_data_stream_0_V_din => dataflow_in_loop_U0_img_data_stream_0_V_din,
        img_data_stream_0_V_full_n => img_data_stream_0_V_full_n,
        img_data_stream_0_V_write => dataflow_in_loop_U0_img_data_stream_0_V_write,
        img_data_stream_1_V_din => dataflow_in_loop_U0_img_data_stream_1_V_din,
        img_data_stream_1_V_full_n => img_data_stream_1_V_full_n,
        img_data_stream_1_V_write => dataflow_in_loop_U0_img_data_stream_1_V_write,
        img_data_stream_2_V_din => dataflow_in_loop_U0_img_data_stream_2_V_din,
        img_data_stream_2_V_full_n => img_data_stream_2_V_full_n,
        img_data_stream_2_V_write => dataflow_in_loop_U0_img_data_stream_2_V_write,
        index => index,
        baseAddr_address0 => dataflow_in_loop_U0_baseAddr_address0,
        baseAddr_ce0 => dataflow_in_loop_U0_baseAddr_ce0,
        baseAddr_d0 => dataflow_in_loop_U0_baseAddr_d0,
        baseAddr_q0 => baseAddr_q0,
        baseAddr_we0 => dataflow_in_loop_U0_baseAddr_we0,
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        w_ap_vld => w_ap_vld,
        row_ap_vld => ap_const_logic_0,
        p_read_ap_vld => p_read_ap_vld,
        p_read1_ap_vld => p_read1_ap_vld,
        index_ap_vld => index_ap_vld,
        ap_done => dataflow_in_loop_U0_ap_done,
        ap_start => dataflow_in_loop_U0_ap_start,
        ap_ready => dataflow_in_loop_U0_ap_ready,
        ap_idle => dataflow_in_loop_U0_ap_idle,
        ap_continue => dataflow_in_loop_U0_ap_continue);





    loop_dataflow_busy_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                loop_dataflow_busy <= ap_const_logic_0;
            else
                if (((ap_continue = ap_const_logic_1) and (loop_dataflow_output_count = local_rows))) then 
                    loop_dataflow_busy <= ap_const_logic_0;
                elsif ((ap_start = ap_const_logic_1)) then 
                    loop_dataflow_busy <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    loop_dataflow_enable_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                loop_dataflow_enable <= ap_const_logic_0;
            else
                if (((loop_dataflow_enable = ap_const_logic_0) and (ap_start = ap_const_logic_1))) then 
                    loop_dataflow_enable <= ap_const_logic_1;
                elsif (((loop_dataflow_enable = ap_const_logic_1) and (loop_dataflow_input_count = local_rows))) then 
                    loop_dataflow_enable <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    loop_dataflow_input_count_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                loop_dataflow_input_count <= ap_const_lv32_0;
            else
                if (((loop_dataflow_enable = ap_const_logic_1) and (loop_dataflow_input_count = local_rows))) then 
                    loop_dataflow_input_count <= ap_const_lv32_0;
                elsif (((loop_dataflow_enable = ap_const_logic_1) and (dataflow_in_loop_U0_ap_ready = ap_const_logic_1))) then 
                    loop_dataflow_input_count <= std_logic_vector(unsigned(loop_dataflow_input_count) + unsigned(ap_const_lv32_1));
                end if; 
            end if;
        end if;
    end process;


    loop_dataflow_output_count_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                loop_dataflow_output_count <= ap_const_lv32_0;
            else
                if (((ap_continue = ap_const_logic_1) and (loop_dataflow_output_count = local_rows))) then 
                    loop_dataflow_output_count <= ap_const_lv32_0;
                elsif ((dataflow_in_loop_U0_ap_done = ap_const_logic_1)) then 
                    loop_dataflow_output_count <= std_logic_vector(unsigned(loop_dataflow_output_count) + unsigned(ap_const_lv32_1));
                end if; 
            end if;
        end if;
    end process;


    ap_done_assign_proc : process(local_rows, loop_dataflow_output_count, loop_dataflow_busy)
    begin
        if (((loop_dataflow_busy = ap_const_logic_1) and (loop_dataflow_output_count = local_rows))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_idle <= dataflow_in_loop_U0_ap_idle;

    ap_ready_assign_proc : process(local_rows, loop_dataflow_input_count)
    begin
        if ((loop_dataflow_input_count = local_rows)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_sync_continue <= ap_continue;
    ap_sync_done <= dataflow_in_loop_U0_ap_done;
    ap_sync_ready <= dataflow_in_loop_U0_ap_ready;
    baseAddr_address0 <= dataflow_in_loop_U0_baseAddr_address0;
    baseAddr_ce0 <= dataflow_in_loop_U0_baseAddr_ce0;
    baseAddr_d0 <= ap_const_lv32_0;
    baseAddr_we0 <= ap_const_logic_0;
    dataflow_in_loop_U0_ap_continue <= ap_const_logic_1;

    dataflow_in_loop_U0_ap_start_assign_proc : process(local_rows, loop_dataflow_enable, loop_dataflow_input_count)
    begin
        if ((not((loop_dataflow_input_count = local_rows)) and (loop_dataflow_enable = ap_const_logic_1))) then 
            dataflow_in_loop_U0_ap_start <= ap_const_logic_1;
        else 
            dataflow_in_loop_U0_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    dataflow_in_loop_U0_row <= loop_dataflow_input_count(31 - 1 downto 0);
    dataflow_in_loop_U0_start_full_n <= ap_const_logic_1;
    dataflow_in_loop_U0_start_write <= ap_const_logic_0;
    img_data_stream_0_V_din <= dataflow_in_loop_U0_img_data_stream_0_V_din;
    img_data_stream_0_V_write <= dataflow_in_loop_U0_img_data_stream_0_V_write;
    img_data_stream_1_V_din <= dataflow_in_loop_U0_img_data_stream_1_V_din;
    img_data_stream_1_V_write <= dataflow_in_loop_U0_img_data_stream_1_V_write;
    img_data_stream_2_V_din <= dataflow_in_loop_U0_img_data_stream_2_V_din;
    img_data_stream_2_V_write <= dataflow_in_loop_U0_img_data_stream_2_V_write;
    m_axi_pMemPort_ARADDR <= dataflow_in_loop_U0_m_axi_pMemPort_ARADDR;
    m_axi_pMemPort_ARBURST <= dataflow_in_loop_U0_m_axi_pMemPort_ARBURST;
    m_axi_pMemPort_ARCACHE <= dataflow_in_loop_U0_m_axi_pMemPort_ARCACHE;
    m_axi_pMemPort_ARID <= dataflow_in_loop_U0_m_axi_pMemPort_ARID;
    m_axi_pMemPort_ARLEN <= dataflow_in_loop_U0_m_axi_pMemPort_ARLEN;
    m_axi_pMemPort_ARLOCK <= dataflow_in_loop_U0_m_axi_pMemPort_ARLOCK;
    m_axi_pMemPort_ARPROT <= dataflow_in_loop_U0_m_axi_pMemPort_ARPROT;
    m_axi_pMemPort_ARQOS <= dataflow_in_loop_U0_m_axi_pMemPort_ARQOS;
    m_axi_pMemPort_ARREGION <= dataflow_in_loop_U0_m_axi_pMemPort_ARREGION;
    m_axi_pMemPort_ARSIZE <= dataflow_in_loop_U0_m_axi_pMemPort_ARSIZE;
    m_axi_pMemPort_ARUSER <= dataflow_in_loop_U0_m_axi_pMemPort_ARUSER;
    m_axi_pMemPort_ARVALID <= dataflow_in_loop_U0_m_axi_pMemPort_ARVALID;
    m_axi_pMemPort_AWADDR <= ap_const_lv32_0;
    m_axi_pMemPort_AWBURST <= ap_const_lv2_0;
    m_axi_pMemPort_AWCACHE <= ap_const_lv4_0;
    m_axi_pMemPort_AWID <= ap_const_lv1_0;
    m_axi_pMemPort_AWLEN <= ap_const_lv32_0;
    m_axi_pMemPort_AWLOCK <= ap_const_lv2_0;
    m_axi_pMemPort_AWPROT <= ap_const_lv3_0;
    m_axi_pMemPort_AWQOS <= ap_const_lv4_0;
    m_axi_pMemPort_AWREGION <= ap_const_lv4_0;
    m_axi_pMemPort_AWSIZE <= ap_const_lv3_0;
    m_axi_pMemPort_AWUSER <= ap_const_lv1_0;
    m_axi_pMemPort_AWVALID <= ap_const_logic_0;
    m_axi_pMemPort_BREADY <= ap_const_logic_0;
    m_axi_pMemPort_RREADY <= dataflow_in_loop_U0_m_axi_pMemPort_RREADY;
    m_axi_pMemPort_WDATA <= ap_const_lv32_0;
    m_axi_pMemPort_WID <= ap_const_lv1_0;
    m_axi_pMemPort_WLAST <= ap_const_logic_0;
    m_axi_pMemPort_WSTRB <= ap_const_lv4_0;
    m_axi_pMemPort_WUSER <= ap_const_lv1_0;
    m_axi_pMemPort_WVALID <= ap_const_logic_0;
end behav;
