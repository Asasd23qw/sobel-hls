-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity readmem is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    m_axi_pMemPort_AWVALID : OUT STD_LOGIC;
    m_axi_pMemPort_AWREADY : IN STD_LOGIC;
    m_axi_pMemPort_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_pMemPort_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_pMemPort_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_pMemPort_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_pMemPort_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_pMemPort_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_pMemPort_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_pMemPort_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_pMemPort_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_pMemPort_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_pMemPort_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_pMemPort_WVALID : OUT STD_LOGIC;
    m_axi_pMemPort_WREADY : IN STD_LOGIC;
    m_axi_pMemPort_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_pMemPort_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_pMemPort_WLAST : OUT STD_LOGIC;
    m_axi_pMemPort_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_pMemPort_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_pMemPort_ARVALID : OUT STD_LOGIC;
    m_axi_pMemPort_ARREADY : IN STD_LOGIC;
    m_axi_pMemPort_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_pMemPort_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_pMemPort_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_pMemPort_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_pMemPort_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_pMemPort_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_pMemPort_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_pMemPort_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_pMemPort_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_pMemPort_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_pMemPort_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_pMemPort_RVALID : IN STD_LOGIC;
    m_axi_pMemPort_RREADY : OUT STD_LOGIC;
    m_axi_pMemPort_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_pMemPort_RLAST : IN STD_LOGIC;
    m_axi_pMemPort_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_pMemPort_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_pMemPort_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_pMemPort_BVALID : IN STD_LOGIC;
    m_axi_pMemPort_BREADY : OUT STD_LOGIC;
    m_axi_pMemPort_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_pMemPort_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_pMemPort_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    w : IN STD_LOGIC_VECTOR (31 downto 0);
    row : IN STD_LOGIC_VECTOR (30 downto 0);
    rows : IN STD_LOGIC_VECTOR (31 downto 0);
    to_r_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    to_r_full_n : IN STD_LOGIC;
    to_r_write : OUT STD_LOGIC;
    p_read1 : IN STD_LOGIC_VECTOR (31 downto 0);
    img_cols_V_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    img_cols_V_out_full_n : IN STD_LOGIC;
    img_cols_V_out_write : OUT STD_LOGIC;
    index : IN STD_LOGIC_VECTOR (31 downto 0);
    baseAddr_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    baseAddr_ce0 : OUT STD_LOGIC;
    baseAddr_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of readmem is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000001000000000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000010000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000100000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (24 downto 0) := "0000000001000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (24 downto 0) := "0000000010000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (24 downto 0) := "0000000100000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (24 downto 0) := "0000001000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (24 downto 0) := "0000010000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (24 downto 0) := "0000100000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (24 downto 0) := "0001000000000000000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (24 downto 0) := "0010000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (24 downto 0) := "0100000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (24 downto 0) := "1000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv30_0 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv30_1 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000001";

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal cache_len : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal pMemPort_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal pMemPort_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal exitcond_i_i_reg_557 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal exitcond1_i_i_reg_538 : STD_LOGIC_VECTOR (0 downto 0);
    signal to_r_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_reg_pp1_iter1_exitcond_i_i_reg_557 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_reg_pp0_iter1_exitcond1_i_i_reg_538 : STD_LOGIC_VECTOR (0 downto 0);
    signal img_cols_V_out_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal indvar8_i_i_reg_205 : STD_LOGIC_VECTOR (29 downto 0);
    signal indvar_i_i_reg_216 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal n_i_i_fu_266_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal n_i_i_reg_465 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal line_len_assign_fu_318_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal line_len_assign_reg_476 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_i_i_fu_362_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_i_i_fu_356_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_i_i_fu_368_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_i_i_reg_490 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_i_i_fu_374_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_cast_i_i_cast_fu_384_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_6_cast_i_i_cast_reg_499 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_3_fu_388_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_3_reg_504 : STD_LOGIC_VECTOR (29 downto 0);
    signal pMemPort_addr_reg_510 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_398_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_2_reg_516 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_402_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i4_i_reg_522 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal pMemPort_addr_1_reg_527 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_17_add_i32_shr_c_fu_424_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_ioackin_m_axi_pMemPort_ARREADY : STD_LOGIC;
    signal exitcond1_i_i_fu_428_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state14_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal indvar_next9_i_i_fu_433_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal pMemPort_addr_1_read_reg_547 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_add_i32_shr_cas_fu_439_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond_i_i_fu_443_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state25_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state26_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state27_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal indvar_next_i_i_fu_448_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal pMemPort_addr_read_reg_566 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state14 : STD_LOGIC;
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state25 : STD_LOGIC;
    signal storemerge_i_i_reg_227 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal tmp_11_i_i_fu_285_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_i_i_fu_380_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_sum_cast_i_i_fu_414_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_m_axi_pMemPort_ARREADY : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ap_block_pp1_stage0_01001 : BOOLEAN;
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal tmp_i1_i_fu_347_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_244_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_fu_254_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_i_i_fu_260_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_i_i_fu_274_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal n_1_i_i_fu_279_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_shl_i_i_fu_304_p3 : STD_LOGIC_VECTOR (33 downto 0);
    signal lhs_V_cast_i_i_fu_300_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal r_V_i_i_fu_312_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal tmp_fu_337_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal row_cast_i_i_fu_328_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal base_assign_fu_290_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_236_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_5_cast_i_i_cast_fu_406_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal p_sum_i_i_fu_409_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (24 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;

    component mem2stream_mul_32bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    mem2stream_mul_32bkb_U7 : component mem2stream_mul_32bkb
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => line_len_assign_reg_476,
        din1 => tmp_2_i_i_reg_490,
        ce => ap_const_logic_1,
        dout => grp_fu_402_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state14) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state14)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state14);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state25) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state25)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state25);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
                    ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_axi_pMemPort_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_pMemPort_ARREADY <= ap_const_logic_0;
            else
                if ((((ap_sig_ioackin_m_axi_pMemPort_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((ap_sig_ioackin_m_axi_pMemPort_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18)))) then 
                    ap_reg_ioackin_m_axi_pMemPort_ARREADY <= ap_const_logic_0;
                elsif ((((m_axi_pMemPort_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((m_axi_pMemPort_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18)))) then 
                    ap_reg_ioackin_m_axi_pMemPort_ARREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    indvar8_i_i_reg_205_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond1_i_i_fu_428_p2 = ap_const_lv1_0))) then 
                indvar8_i_i_reg_205 <= indvar_next9_i_i_fu_433_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                indvar8_i_i_reg_205 <= ap_const_lv30_0;
            end if; 
        end if;
    end process;

    indvar_i_i_reg_216_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond_i_i_fu_443_p2 = ap_const_lv1_0))) then 
                indvar_i_i_reg_216 <= indvar_next_i_i_fu_448_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
                indvar_i_i_reg_216 <= ap_const_lv30_0;
            end if; 
        end if;
    end process;

    storemerge_i_i_reg_227_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                storemerge_i_i_reg_227 <= line_len_assign_reg_476;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (img_cols_V_out_full_n = ap_const_logic_1) and (tmp_1_i_i_fu_356_p2 = ap_const_lv1_0))) then 
                storemerge_i_i_reg_227 <= tmp_4_i_i_fu_362_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_reg_pp0_iter1_exitcond1_i_i_reg_538 <= exitcond1_i_i_reg_538;
                exitcond1_i_i_reg_538 <= exitcond1_i_i_fu_428_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                ap_reg_pp1_iter1_exitcond_i_i_reg_557 <= exitcond_i_i_reg_557;
                exitcond_i_i_reg_557 <= exitcond_i_i_fu_443_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then
                cache_len <= storemerge_i_i_reg_227;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (img_cols_V_out_full_n = ap_const_logic_1))) then
                line_len_assign_reg_476 <= r_V_i_i_fu_312_p2(33 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                n_i_i_reg_465 <= n_i_i_fu_266_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond1_i_i_reg_538 = ap_const_lv1_0))) then
                pMemPort_addr_1_read_reg_547 <= m_axi_pMemPort_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                pMemPort_addr_1_reg_527 <= p_sum_cast_i_i_fu_414_p1(32 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond_i_i_reg_557 = ap_const_lv1_0))) then
                pMemPort_addr_read_reg_566 <= m_axi_pMemPort_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_3_i_i_fu_374_p2 = ap_const_lv1_1) and (tmp_1_i_i_fu_356_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3) and (img_cols_V_out_full_n = ap_const_logic_1))) then
                    pMemPort_addr_reg_510(29 downto 0) <= tmp_6_i_i_fu_380_p1(32 - 1 downto 0)(29 downto 0);
                tmp_2_reg_516 <= tmp_2_fu_398_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_1_i_i_fu_356_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3) and (img_cols_V_out_full_n = ap_const_logic_1))) then
                tmp_2_i_i_reg_490 <= tmp_2_i_i_fu_368_p2;
                    tmp_6_cast_i_i_cast_reg_499(29 downto 0) <= tmp_6_cast_i_i_cast_fu_384_p1(29 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_1_i_i_fu_356_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3) and (img_cols_V_out_full_n = ap_const_logic_1) and (tmp_3_i_i_fu_374_p2 = ap_const_lv1_0))) then
                tmp_3_reg_504 <= tmp_3_fu_388_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                tmp_i4_i_reg_522 <= grp_fu_402_p2;
            end if;
        end if;
    end process;
    tmp_6_cast_i_i_cast_reg_499(32 downto 30) <= "000";
    pMemPort_addr_reg_510(31 downto 30) <= "00";

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, img_cols_V_out_full_n, ap_CS_fsm_state18, ap_enable_reg_pp1_iter1, ap_CS_fsm_state7, ap_enable_reg_pp0_iter1, ap_enable_reg_pp1_iter2, ap_enable_reg_pp0_iter2, ap_CS_fsm_state3, tmp_1_i_i_fu_356_p2, tmp_3_i_i_fu_374_p2, ap_sig_ioackin_m_axi_pMemPort_ARREADY, exitcond1_i_i_fu_428_p2, ap_enable_reg_pp0_iter0, exitcond_i_i_fu_443_p2, ap_enable_reg_pp1_iter0, ap_block_pp0_stage0_subdone, ap_block_pp1_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((tmp_3_i_i_fu_374_p2 = ap_const_lv1_1) and (tmp_1_i_i_fu_356_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3) and (img_cols_V_out_full_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                elsif (((tmp_1_i_i_fu_356_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3) and (img_cols_V_out_full_n = ap_const_logic_1) and (tmp_3_i_i_fu_374_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (img_cols_V_out_full_n = ap_const_logic_1) and (tmp_1_i_i_fu_356_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state29;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((ap_sig_ioackin_m_axi_pMemPort_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (exitcond1_i_i_fu_428_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (exitcond1_i_i_fu_428_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state18 => 
                if (((ap_sig_ioackin_m_axi_pMemPort_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (exitcond_i_i_fu_443_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))) and not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (exitcond_i_i_fu_443_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(13);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(22);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state17 <= ap_CS_fsm(14);
    ap_CS_fsm_state18 <= ap_CS_fsm(15);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state24 <= ap_CS_fsm(21);
    ap_CS_fsm_state29 <= ap_CS_fsm(24);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(m_axi_pMemPort_RVALID, to_r_full_n, ap_enable_reg_pp0_iter1, exitcond1_i_i_reg_538, ap_enable_reg_pp0_iter2, ap_reg_pp0_iter1_exitcond1_i_i_reg_538)
    begin
                ap_block_pp0_stage0_01001 <= (((to_r_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_reg_pp0_iter1_exitcond1_i_i_reg_538 = ap_const_lv1_0)) or ((m_axi_pMemPort_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (exitcond1_i_i_reg_538 = ap_const_lv1_0)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(m_axi_pMemPort_RVALID, to_r_full_n, ap_enable_reg_pp0_iter1, exitcond1_i_i_reg_538, ap_enable_reg_pp0_iter2, ap_reg_pp0_iter1_exitcond1_i_i_reg_538)
    begin
                ap_block_pp0_stage0_11001 <= (((to_r_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_reg_pp0_iter1_exitcond1_i_i_reg_538 = ap_const_lv1_0)) or ((m_axi_pMemPort_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (exitcond1_i_i_reg_538 = ap_const_lv1_0)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(m_axi_pMemPort_RVALID, to_r_full_n, ap_enable_reg_pp0_iter1, exitcond1_i_i_reg_538, ap_enable_reg_pp0_iter2, ap_reg_pp0_iter1_exitcond1_i_i_reg_538)
    begin
                ap_block_pp0_stage0_subdone <= (((to_r_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_reg_pp0_iter1_exitcond1_i_i_reg_538 = ap_const_lv1_0)) or ((m_axi_pMemPort_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (exitcond1_i_i_reg_538 = ap_const_lv1_0)));
    end process;

        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage0_01001_assign_proc : process(m_axi_pMemPort_RVALID, to_r_full_n, ap_enable_reg_pp1_iter1, exitcond_i_i_reg_557, ap_enable_reg_pp1_iter2, ap_reg_pp1_iter1_exitcond_i_i_reg_557)
    begin
                ap_block_pp1_stage0_01001 <= (((to_r_full_n = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_reg_pp1_iter1_exitcond_i_i_reg_557 = ap_const_lv1_0)) or ((m_axi_pMemPort_RVALID = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (exitcond_i_i_reg_557 = ap_const_lv1_0)));
    end process;


    ap_block_pp1_stage0_11001_assign_proc : process(m_axi_pMemPort_RVALID, to_r_full_n, ap_enable_reg_pp1_iter1, exitcond_i_i_reg_557, ap_enable_reg_pp1_iter2, ap_reg_pp1_iter1_exitcond_i_i_reg_557)
    begin
                ap_block_pp1_stage0_11001 <= (((to_r_full_n = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_reg_pp1_iter1_exitcond_i_i_reg_557 = ap_const_lv1_0)) or ((m_axi_pMemPort_RVALID = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (exitcond_i_i_reg_557 = ap_const_lv1_0)));
    end process;


    ap_block_pp1_stage0_subdone_assign_proc : process(m_axi_pMemPort_RVALID, to_r_full_n, ap_enable_reg_pp1_iter1, exitcond_i_i_reg_557, ap_enable_reg_pp1_iter2, ap_reg_pp1_iter1_exitcond_i_i_reg_557)
    begin
                ap_block_pp1_stage0_subdone <= (((to_r_full_n = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_reg_pp1_iter1_exitcond_i_i_reg_557 = ap_const_lv1_0)) or ((m_axi_pMemPort_RVALID = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (exitcond_i_i_reg_557 = ap_const_lv1_0)));
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0));
    end process;

        ap_block_state14_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state15_pp0_stage0_iter1_assign_proc : process(m_axi_pMemPort_RVALID, exitcond1_i_i_reg_538)
    begin
                ap_block_state15_pp0_stage0_iter1 <= ((m_axi_pMemPort_RVALID = ap_const_logic_0) and (exitcond1_i_i_reg_538 = ap_const_lv1_0));
    end process;


    ap_block_state16_pp0_stage0_iter2_assign_proc : process(to_r_full_n, ap_reg_pp0_iter1_exitcond1_i_i_reg_538)
    begin
                ap_block_state16_pp0_stage0_iter2 <= ((to_r_full_n = ap_const_logic_0) and (ap_reg_pp0_iter1_exitcond1_i_i_reg_538 = ap_const_lv1_0));
    end process;

        ap_block_state25_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state26_pp1_stage0_iter1_assign_proc : process(m_axi_pMemPort_RVALID, exitcond_i_i_reg_557)
    begin
                ap_block_state26_pp1_stage0_iter1 <= ((m_axi_pMemPort_RVALID = ap_const_logic_0) and (exitcond_i_i_reg_557 = ap_const_lv1_0));
    end process;


    ap_block_state27_pp1_stage0_iter2_assign_proc : process(to_r_full_n, ap_reg_pp1_iter1_exitcond_i_i_reg_557)
    begin
                ap_block_state27_pp1_stage0_iter2 <= ((to_r_full_n = ap_const_logic_0) and (ap_reg_pp1_iter1_exitcond_i_i_reg_557 = ap_const_lv1_0));
    end process;


    ap_condition_pp0_exit_iter0_state14_assign_proc : process(exitcond1_i_i_fu_428_p2)
    begin
        if ((exitcond1_i_i_fu_428_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state14 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state14 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state25_assign_proc : process(exitcond_i_i_fu_443_p2)
    begin
        if ((exitcond_i_i_fu_443_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state25 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state25 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state29)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;

    ap_sig_ioackin_m_axi_pMemPort_ARREADY_assign_proc : process(m_axi_pMemPort_ARREADY, ap_reg_ioackin_m_axi_pMemPort_ARREADY)
    begin
        if ((ap_reg_ioackin_m_axi_pMemPort_ARREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_m_axi_pMemPort_ARREADY <= m_axi_pMemPort_ARREADY;
        else 
            ap_sig_ioackin_m_axi_pMemPort_ARREADY <= ap_const_logic_1;
        end if; 
    end process;

    baseAddr_address0 <= tmp_11_i_i_fu_285_p1(2 - 1 downto 0);

    baseAddr_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            baseAddr_ce0 <= ap_const_logic_1;
        else 
            baseAddr_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    base_assign_fu_290_p4 <= baseAddr_q0(31 downto 2);
    exitcond1_i_i_fu_428_p2 <= "1" when (indvar8_i_i_reg_205 = tmp_3_reg_504) else "0";
    exitcond_i_i_fu_443_p2 <= "1" when (indvar_i_i_reg_216 = tmp_2_reg_516) else "0";
    grp_fu_236_p2 <= std_logic_vector(unsigned(tmp_i1_i_fu_347_p3) - unsigned(cache_len));
    icmp_fu_254_p2 <= "1" when (signed(tmp_1_fu_244_p4) < signed(ap_const_lv31_1)) else "0";

    img_cols_V_out_blk_n_assign_proc : process(img_cols_V_out_full_n, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            img_cols_V_out_blk_n <= img_cols_V_out_full_n;
        else 
            img_cols_V_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    img_cols_V_out_din <= p_read1;

    img_cols_V_out_write_assign_proc : process(img_cols_V_out_full_n, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (img_cols_V_out_full_n = ap_const_logic_1))) then 
            img_cols_V_out_write <= ap_const_logic_1;
        else 
            img_cols_V_out_write <= ap_const_logic_0;
        end if; 
    end process;

    indvar_next9_i_i_fu_433_p2 <= std_logic_vector(unsigned(indvar8_i_i_reg_205) + unsigned(ap_const_lv30_1));
    indvar_next_i_i_fu_448_p2 <= std_logic_vector(unsigned(indvar_i_i_reg_216) + unsigned(ap_const_lv30_1));

    internal_ap_ready_assign_proc : process(ap_CS_fsm_state29)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    lhs_V_cast_i_i_fu_300_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_read1),34));
    line_len_assign_fu_318_p4 <= r_V_i_i_fu_312_p2(33 downto 2);

    m_axi_pMemPort_ARADDR_assign_proc : process(ap_CS_fsm_state18, ap_CS_fsm_state7, pMemPort_addr_reg_510, pMemPort_addr_1_reg_527, ap_reg_ioackin_m_axi_pMemPort_ARREADY)
    begin
        if ((ap_reg_ioackin_m_axi_pMemPort_ARREADY = ap_const_logic_0)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                m_axi_pMemPort_ARADDR <= pMemPort_addr_reg_510;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                m_axi_pMemPort_ARADDR <= pMemPort_addr_1_reg_527;
            else 
                m_axi_pMemPort_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            m_axi_pMemPort_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_pMemPort_ARBURST <= ap_const_lv2_0;
    m_axi_pMemPort_ARCACHE <= ap_const_lv4_0;
    m_axi_pMemPort_ARID <= ap_const_lv1_0;

    m_axi_pMemPort_ARLEN_assign_proc : process(ap_CS_fsm_state18, ap_CS_fsm_state7, tmp_17_add_i32_shr_c_fu_424_p1, tmp_add_i32_shr_cas_fu_439_p1, ap_reg_ioackin_m_axi_pMemPort_ARREADY)
    begin
        if ((ap_reg_ioackin_m_axi_pMemPort_ARREADY = ap_const_logic_0)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                m_axi_pMemPort_ARLEN <= tmp_add_i32_shr_cas_fu_439_p1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                m_axi_pMemPort_ARLEN <= tmp_17_add_i32_shr_c_fu_424_p1;
            else 
                m_axi_pMemPort_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            m_axi_pMemPort_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_pMemPort_ARLOCK <= ap_const_lv2_0;
    m_axi_pMemPort_ARPROT <= ap_const_lv3_0;
    m_axi_pMemPort_ARQOS <= ap_const_lv4_0;
    m_axi_pMemPort_ARREGION <= ap_const_lv4_0;
    m_axi_pMemPort_ARSIZE <= ap_const_lv3_0;
    m_axi_pMemPort_ARUSER <= ap_const_lv1_0;

    m_axi_pMemPort_ARVALID_assign_proc : process(ap_CS_fsm_state18, ap_CS_fsm_state7, ap_reg_ioackin_m_axi_pMemPort_ARREADY)
    begin
        if ((((ap_reg_ioackin_m_axi_pMemPort_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((ap_reg_ioackin_m_axi_pMemPort_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state18)))) then 
            m_axi_pMemPort_ARVALID <= ap_const_logic_1;
        else 
            m_axi_pMemPort_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_pMemPort_AWADDR <= ap_const_lv32_0;
    m_axi_pMemPort_AWBURST <= ap_const_lv2_0;
    m_axi_pMemPort_AWCACHE <= ap_const_lv4_0;
    m_axi_pMemPort_AWID <= ap_const_lv1_0;
    m_axi_pMemPort_AWLEN <= ap_const_lv32_0;
    m_axi_pMemPort_AWLOCK <= ap_const_lv2_0;
    m_axi_pMemPort_AWPROT <= ap_const_lv3_0;
    m_axi_pMemPort_AWQOS <= ap_const_lv4_0;
    m_axi_pMemPort_AWREGION <= ap_const_lv4_0;
    m_axi_pMemPort_AWSIZE <= ap_const_lv3_0;
    m_axi_pMemPort_AWUSER <= ap_const_lv1_0;
    m_axi_pMemPort_AWVALID <= ap_const_logic_0;
    m_axi_pMemPort_BREADY <= ap_const_logic_0;

    m_axi_pMemPort_RREADY_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, exitcond_i_i_reg_557, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond1_i_i_reg_538, ap_block_pp0_stage0_11001, ap_block_pp1_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond1_i_i_reg_538 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond_i_i_reg_557 = ap_const_lv1_0)))) then 
            m_axi_pMemPort_RREADY <= ap_const_logic_1;
        else 
            m_axi_pMemPort_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_pMemPort_WDATA <= ap_const_lv32_0;
    m_axi_pMemPort_WID <= ap_const_lv1_0;
    m_axi_pMemPort_WLAST <= ap_const_logic_0;
    m_axi_pMemPort_WSTRB <= ap_const_lv4_0;
    m_axi_pMemPort_WUSER <= ap_const_lv1_0;
    m_axi_pMemPort_WVALID <= ap_const_logic_0;
    n_1_i_i_fu_279_p3 <= 
        index when (tmp_9_i_i_fu_274_p2(0) = '1') else 
        n_i_i_reg_465;
    n_i_i_fu_266_p3 <= 
        tmp_8_i_i_fu_260_p2 when (icmp_fu_254_p2(0) = '1') else 
        ap_const_lv32_0;

    pMemPort_blk_n_AR_assign_proc : process(m_axi_pMemPort_ARREADY, ap_CS_fsm_state18, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            pMemPort_blk_n_AR <= m_axi_pMemPort_ARREADY;
        else 
            pMemPort_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    pMemPort_blk_n_R_assign_proc : process(m_axi_pMemPort_RVALID, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, exitcond_i_i_reg_557, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond1_i_i_reg_538)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (exitcond1_i_i_reg_538 = ap_const_lv1_0)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (exitcond_i_i_reg_557 = ap_const_lv1_0)))) then 
            pMemPort_blk_n_R <= m_axi_pMemPort_RVALID;
        else 
            pMemPort_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    p_shl_i_i_fu_304_p3 <= (p_read1 & ap_const_lv2_0);
        p_sum_cast_i_i_fu_414_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_sum_i_i_fu_409_p2),64));

    p_sum_i_i_fu_409_p2 <= std_logic_vector(signed(tmp_5_cast_i_i_cast_fu_406_p1) + signed(tmp_6_cast_i_i_cast_reg_499));
    r_V_i_i_fu_312_p2 <= std_logic_vector(unsigned(p_shl_i_i_fu_304_p3) - unsigned(lhs_V_cast_i_i_fu_300_p1));

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    row_cast_i_i_fu_328_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(row),32));
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

        tmp_11_i_i_fu_285_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(n_1_i_i_fu_279_p3),64));

    tmp_17_add_i32_shr_c_fu_424_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_reg_504),32));
    tmp_1_fu_244_p4 <= index(31 downto 1);
    tmp_1_i_i_fu_356_p2 <= "1" when (unsigned(cache_len) < unsigned(tmp_i1_i_fu_347_p3)) else "0";
    tmp_2_fu_398_p1 <= grp_fu_236_p2(30 - 1 downto 0);
    tmp_2_i_i_fu_368_p2 <= std_logic_vector(unsigned(row_cast_i_i_fu_328_p1) + unsigned(ap_const_lv32_1));
    tmp_3_fu_388_p1 <= grp_fu_236_p2(30 - 1 downto 0);
    tmp_3_i_i_fu_374_p2 <= "1" when (tmp_2_i_i_fu_368_p2 = rows) else "0";
    tmp_4_i_i_fu_362_p2 <= std_logic_vector(unsigned(cache_len) - unsigned(line_len_assign_fu_318_p4));
        tmp_5_cast_i_i_cast_fu_406_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_i4_i_reg_522),33));

    tmp_6_cast_i_i_cast_fu_384_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(base_assign_fu_290_p4),33));
    tmp_6_i_i_fu_380_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(base_assign_fu_290_p4),64));
    tmp_8_i_i_fu_260_p2 <= std_logic_vector(unsigned(index) + unsigned(ap_const_lv32_1));
    tmp_9_i_i_fu_274_p2 <= "1" when (n_i_i_reg_465 = w) else "0";
    tmp_add_i32_shr_cas_fu_439_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_reg_516),32));
    tmp_fu_337_p4 <= r_V_i_i_fu_312_p2(32 downto 2);
    tmp_i1_i_fu_347_p3 <= (tmp_fu_337_p4 & ap_const_lv1_0);

    to_r_blk_n_assign_proc : process(to_r_full_n, ap_block_pp1_stage0, ap_block_pp0_stage0, ap_enable_reg_pp1_iter2, ap_reg_pp1_iter1_exitcond_i_i_reg_557, ap_enable_reg_pp0_iter2, ap_reg_pp0_iter1_exitcond1_i_i_reg_538)
    begin
        if ((((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_reg_pp0_iter1_exitcond1_i_i_reg_538 = ap_const_lv1_0)) or ((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_reg_pp1_iter1_exitcond_i_i_reg_557 = ap_const_lv1_0)))) then 
            to_r_blk_n <= to_r_full_n;
        else 
            to_r_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    to_r_din_assign_proc : process(ap_enable_reg_pp1_iter2, ap_reg_pp1_iter1_exitcond_i_i_reg_557, ap_enable_reg_pp0_iter2, ap_reg_pp0_iter1_exitcond1_i_i_reg_538, pMemPort_addr_1_read_reg_547, pMemPort_addr_read_reg_566, ap_block_pp0_stage0_01001, ap_block_pp1_stage0_01001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_01001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_reg_pp1_iter1_exitcond_i_i_reg_557 = ap_const_lv1_0))) then 
            to_r_din <= pMemPort_addr_read_reg_566;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_reg_pp0_iter1_exitcond1_i_i_reg_538 = ap_const_lv1_0))) then 
            to_r_din <= pMemPort_addr_1_read_reg_547;
        else 
            to_r_din <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    to_r_write_assign_proc : process(ap_enable_reg_pp1_iter2, ap_reg_pp1_iter1_exitcond_i_i_reg_557, ap_enable_reg_pp0_iter2, ap_reg_pp0_iter1_exitcond1_i_i_reg_538, ap_block_pp0_stage0_11001, ap_block_pp1_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_reg_pp0_iter1_exitcond1_i_i_reg_538 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_reg_pp1_iter1_exitcond_i_i_reg_557 = ap_const_lv1_0)))) then 
            to_r_write <= ap_const_logic_1;
        else 
            to_r_write <= ap_const_logic_0;
        end if; 
    end process;

end behav;
