-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dataflow_in_loop is
port (
    w : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_pMemPort_AWVALID : OUT STD_LOGIC;
    m_axi_pMemPort_AWREADY : IN STD_LOGIC;
    m_axi_pMemPort_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_pMemPort_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_pMemPort_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_pMemPort_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_pMemPort_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_pMemPort_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_pMemPort_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_pMemPort_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_pMemPort_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_pMemPort_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_pMemPort_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_pMemPort_WVALID : OUT STD_LOGIC;
    m_axi_pMemPort_WREADY : IN STD_LOGIC;
    m_axi_pMemPort_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_pMemPort_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_pMemPort_WLAST : OUT STD_LOGIC;
    m_axi_pMemPort_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_pMemPort_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_pMemPort_ARVALID : OUT STD_LOGIC;
    m_axi_pMemPort_ARREADY : IN STD_LOGIC;
    m_axi_pMemPort_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_pMemPort_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_pMemPort_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_pMemPort_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_pMemPort_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_pMemPort_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_pMemPort_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_pMemPort_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_pMemPort_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_pMemPort_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_pMemPort_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_pMemPort_RVALID : IN STD_LOGIC;
    m_axi_pMemPort_RREADY : OUT STD_LOGIC;
    m_axi_pMemPort_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_pMemPort_RLAST : IN STD_LOGIC;
    m_axi_pMemPort_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_pMemPort_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_pMemPort_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_pMemPort_BVALID : IN STD_LOGIC;
    m_axi_pMemPort_BREADY : OUT STD_LOGIC;
    m_axi_pMemPort_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_pMemPort_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_pMemPort_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    row : IN STD_LOGIC_VECTOR (30 downto 0);
    p_read : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (31 downto 0);
    img_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    img_data_stream_0_V_full_n : IN STD_LOGIC;
    img_data_stream_0_V_write : OUT STD_LOGIC;
    img_data_stream_1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    img_data_stream_1_V_full_n : IN STD_LOGIC;
    img_data_stream_1_V_write : OUT STD_LOGIC;
    img_data_stream_2_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    img_data_stream_2_V_full_n : IN STD_LOGIC;
    img_data_stream_2_V_write : OUT STD_LOGIC;
    index : IN STD_LOGIC_VECTOR (31 downto 0);
    baseAddr_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    baseAddr_ce0 : OUT STD_LOGIC;
    baseAddr_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    baseAddr_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    baseAddr_we0 : OUT STD_LOGIC;
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    w_ap_vld : IN STD_LOGIC;
    row_ap_vld : IN STD_LOGIC;
    p_read_ap_vld : IN STD_LOGIC;
    p_read1_ap_vld : IN STD_LOGIC;
    index_ap_vld : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC );
end;


architecture behav of dataflow_in_loop is 
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";

    signal readmem_U0_ap_start : STD_LOGIC;
    signal readmem_U0_ap_done : STD_LOGIC;
    signal readmem_U0_ap_continue : STD_LOGIC;
    signal readmem_U0_ap_idle : STD_LOGIC;
    signal readmem_U0_ap_ready : STD_LOGIC;
    signal readmem_U0_start_out : STD_LOGIC;
    signal readmem_U0_start_write : STD_LOGIC;
    signal readmem_U0_m_axi_pMemPort_AWVALID : STD_LOGIC;
    signal readmem_U0_m_axi_pMemPort_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal readmem_U0_m_axi_pMemPort_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal readmem_U0_m_axi_pMemPort_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal readmem_U0_m_axi_pMemPort_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal readmem_U0_m_axi_pMemPort_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal readmem_U0_m_axi_pMemPort_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal readmem_U0_m_axi_pMemPort_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal readmem_U0_m_axi_pMemPort_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal readmem_U0_m_axi_pMemPort_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal readmem_U0_m_axi_pMemPort_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal readmem_U0_m_axi_pMemPort_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal readmem_U0_m_axi_pMemPort_WVALID : STD_LOGIC;
    signal readmem_U0_m_axi_pMemPort_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal readmem_U0_m_axi_pMemPort_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal readmem_U0_m_axi_pMemPort_WLAST : STD_LOGIC;
    signal readmem_U0_m_axi_pMemPort_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal readmem_U0_m_axi_pMemPort_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal readmem_U0_m_axi_pMemPort_ARVALID : STD_LOGIC;
    signal readmem_U0_m_axi_pMemPort_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal readmem_U0_m_axi_pMemPort_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal readmem_U0_m_axi_pMemPort_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal readmem_U0_m_axi_pMemPort_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal readmem_U0_m_axi_pMemPort_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal readmem_U0_m_axi_pMemPort_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal readmem_U0_m_axi_pMemPort_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal readmem_U0_m_axi_pMemPort_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal readmem_U0_m_axi_pMemPort_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal readmem_U0_m_axi_pMemPort_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal readmem_U0_m_axi_pMemPort_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal readmem_U0_m_axi_pMemPort_RREADY : STD_LOGIC;
    signal readmem_U0_m_axi_pMemPort_BREADY : STD_LOGIC;
    signal readmem_U0_to_r_din : STD_LOGIC_VECTOR (31 downto 0);
    signal readmem_U0_to_r_write : STD_LOGIC;
    signal readmem_U0_img_cols_V_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal readmem_U0_img_cols_V_out_write : STD_LOGIC;
    signal readmem_U0_baseAddr_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal readmem_U0_baseAddr_ce0 : STD_LOGIC;
    signal Loop_0_proc_U0_ap_start : STD_LOGIC;
    signal Loop_0_proc_U0_ap_done : STD_LOGIC;
    signal Loop_0_proc_U0_ap_continue : STD_LOGIC;
    signal Loop_0_proc_U0_ap_idle : STD_LOGIC;
    signal Loop_0_proc_U0_ap_ready : STD_LOGIC;
    signal Loop_0_proc_U0_img_cols_V_read : STD_LOGIC;
    signal Loop_0_proc_U0_cacheBuff1_i_read : STD_LOGIC;
    signal Loop_0_proc_U0_img_data_stream_0_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Loop_0_proc_U0_img_data_stream_0_V_write : STD_LOGIC;
    signal Loop_0_proc_U0_img_data_stream_1_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Loop_0_proc_U0_img_data_stream_1_V_write : STD_LOGIC;
    signal Loop_0_proc_U0_img_data_stream_2_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Loop_0_proc_U0_img_data_stream_2_V_write : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal cacheBuff_full_n : STD_LOGIC;
    signal cacheBuff_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal cacheBuff_empty_n : STD_LOGIC;
    signal img_cols_V_c_full_n : STD_LOGIC;
    signal img_cols_V_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal img_cols_V_c_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal start_for_Loop_0_proc_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Loop_0_proc_U0_full_n : STD_LOGIC;
    signal start_for_Loop_0_proc_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Loop_0_proc_U0_empty_n : STD_LOGIC;
    signal Loop_0_proc_U0_start_full_n : STD_LOGIC;
    signal Loop_0_proc_U0_start_write : STD_LOGIC;

    component readmem IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        m_axi_pMemPort_AWVALID : OUT STD_LOGIC;
        m_axi_pMemPort_AWREADY : IN STD_LOGIC;
        m_axi_pMemPort_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_pMemPort_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_pMemPort_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_pMemPort_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_pMemPort_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_pMemPort_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_pMemPort_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_pMemPort_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_pMemPort_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_pMemPort_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_pMemPort_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_pMemPort_WVALID : OUT STD_LOGIC;
        m_axi_pMemPort_WREADY : IN STD_LOGIC;
        m_axi_pMemPort_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_pMemPort_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_pMemPort_WLAST : OUT STD_LOGIC;
        m_axi_pMemPort_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_pMemPort_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_pMemPort_ARVALID : OUT STD_LOGIC;
        m_axi_pMemPort_ARREADY : IN STD_LOGIC;
        m_axi_pMemPort_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_pMemPort_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_pMemPort_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_pMemPort_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_pMemPort_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_pMemPort_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_pMemPort_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_pMemPort_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_pMemPort_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_pMemPort_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_pMemPort_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_pMemPort_RVALID : IN STD_LOGIC;
        m_axi_pMemPort_RREADY : OUT STD_LOGIC;
        m_axi_pMemPort_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_pMemPort_RLAST : IN STD_LOGIC;
        m_axi_pMemPort_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_pMemPort_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_pMemPort_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_pMemPort_BVALID : IN STD_LOGIC;
        m_axi_pMemPort_BREADY : OUT STD_LOGIC;
        m_axi_pMemPort_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_pMemPort_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_pMemPort_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        w : IN STD_LOGIC_VECTOR (31 downto 0);
        row : IN STD_LOGIC_VECTOR (30 downto 0);
        rows : IN STD_LOGIC_VECTOR (31 downto 0);
        to_r_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        to_r_full_n : IN STD_LOGIC;
        to_r_write : OUT STD_LOGIC;
        p_read1 : IN STD_LOGIC_VECTOR (31 downto 0);
        img_cols_V_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        img_cols_V_out_full_n : IN STD_LOGIC;
        img_cols_V_out_write : OUT STD_LOGIC;
        index : IN STD_LOGIC_VECTOR (31 downto 0);
        baseAddr_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
        baseAddr_ce0 : OUT STD_LOGIC;
        baseAddr_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Loop_0_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        img_cols_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        img_cols_V_empty_n : IN STD_LOGIC;
        img_cols_V_read : OUT STD_LOGIC;
        cacheBuff1_i_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        cacheBuff1_i_empty_n : IN STD_LOGIC;
        cacheBuff1_i_read : OUT STD_LOGIC;
        img_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_0_V_full_n : IN STD_LOGIC;
        img_data_stream_0_V_write : OUT STD_LOGIC;
        img_data_stream_1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_1_V_full_n : IN STD_LOGIC;
        img_data_stream_1_V_write : OUT STD_LOGIC;
        img_data_stream_2_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_2_V_full_n : IN STD_LOGIC;
        img_data_stream_2_V_write : OUT STD_LOGIC );
    end component;


    component fifo_w32_d3840_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w32_d1_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_Loop_0_cud IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    readmem_U0 : component readmem
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => readmem_U0_ap_start,
        start_full_n => start_for_Loop_0_proc_U0_full_n,
        ap_done => readmem_U0_ap_done,
        ap_continue => readmem_U0_ap_continue,
        ap_idle => readmem_U0_ap_idle,
        ap_ready => readmem_U0_ap_ready,
        start_out => readmem_U0_start_out,
        start_write => readmem_U0_start_write,
        m_axi_pMemPort_AWVALID => readmem_U0_m_axi_pMemPort_AWVALID,
        m_axi_pMemPort_AWREADY => ap_const_logic_0,
        m_axi_pMemPort_AWADDR => readmem_U0_m_axi_pMemPort_AWADDR,
        m_axi_pMemPort_AWID => readmem_U0_m_axi_pMemPort_AWID,
        m_axi_pMemPort_AWLEN => readmem_U0_m_axi_pMemPort_AWLEN,
        m_axi_pMemPort_AWSIZE => readmem_U0_m_axi_pMemPort_AWSIZE,
        m_axi_pMemPort_AWBURST => readmem_U0_m_axi_pMemPort_AWBURST,
        m_axi_pMemPort_AWLOCK => readmem_U0_m_axi_pMemPort_AWLOCK,
        m_axi_pMemPort_AWCACHE => readmem_U0_m_axi_pMemPort_AWCACHE,
        m_axi_pMemPort_AWPROT => readmem_U0_m_axi_pMemPort_AWPROT,
        m_axi_pMemPort_AWQOS => readmem_U0_m_axi_pMemPort_AWQOS,
        m_axi_pMemPort_AWREGION => readmem_U0_m_axi_pMemPort_AWREGION,
        m_axi_pMemPort_AWUSER => readmem_U0_m_axi_pMemPort_AWUSER,
        m_axi_pMemPort_WVALID => readmem_U0_m_axi_pMemPort_WVALID,
        m_axi_pMemPort_WREADY => ap_const_logic_0,
        m_axi_pMemPort_WDATA => readmem_U0_m_axi_pMemPort_WDATA,
        m_axi_pMemPort_WSTRB => readmem_U0_m_axi_pMemPort_WSTRB,
        m_axi_pMemPort_WLAST => readmem_U0_m_axi_pMemPort_WLAST,
        m_axi_pMemPort_WID => readmem_U0_m_axi_pMemPort_WID,
        m_axi_pMemPort_WUSER => readmem_U0_m_axi_pMemPort_WUSER,
        m_axi_pMemPort_ARVALID => readmem_U0_m_axi_pMemPort_ARVALID,
        m_axi_pMemPort_ARREADY => m_axi_pMemPort_ARREADY,
        m_axi_pMemPort_ARADDR => readmem_U0_m_axi_pMemPort_ARADDR,
        m_axi_pMemPort_ARID => readmem_U0_m_axi_pMemPort_ARID,
        m_axi_pMemPort_ARLEN => readmem_U0_m_axi_pMemPort_ARLEN,
        m_axi_pMemPort_ARSIZE => readmem_U0_m_axi_pMemPort_ARSIZE,
        m_axi_pMemPort_ARBURST => readmem_U0_m_axi_pMemPort_ARBURST,
        m_axi_pMemPort_ARLOCK => readmem_U0_m_axi_pMemPort_ARLOCK,
        m_axi_pMemPort_ARCACHE => readmem_U0_m_axi_pMemPort_ARCACHE,
        m_axi_pMemPort_ARPROT => readmem_U0_m_axi_pMemPort_ARPROT,
        m_axi_pMemPort_ARQOS => readmem_U0_m_axi_pMemPort_ARQOS,
        m_axi_pMemPort_ARREGION => readmem_U0_m_axi_pMemPort_ARREGION,
        m_axi_pMemPort_ARUSER => readmem_U0_m_axi_pMemPort_ARUSER,
        m_axi_pMemPort_RVALID => m_axi_pMemPort_RVALID,
        m_axi_pMemPort_RREADY => readmem_U0_m_axi_pMemPort_RREADY,
        m_axi_pMemPort_RDATA => m_axi_pMemPort_RDATA,
        m_axi_pMemPort_RLAST => m_axi_pMemPort_RLAST,
        m_axi_pMemPort_RID => m_axi_pMemPort_RID,
        m_axi_pMemPort_RUSER => m_axi_pMemPort_RUSER,
        m_axi_pMemPort_RRESP => m_axi_pMemPort_RRESP,
        m_axi_pMemPort_BVALID => ap_const_logic_0,
        m_axi_pMemPort_BREADY => readmem_U0_m_axi_pMemPort_BREADY,
        m_axi_pMemPort_BRESP => ap_const_lv2_0,
        m_axi_pMemPort_BID => ap_const_lv1_0,
        m_axi_pMemPort_BUSER => ap_const_lv1_0,
        w => w,
        row => row,
        rows => p_read,
        to_r_din => readmem_U0_to_r_din,
        to_r_full_n => cacheBuff_full_n,
        to_r_write => readmem_U0_to_r_write,
        p_read1 => p_read1,
        img_cols_V_out_din => readmem_U0_img_cols_V_out_din,
        img_cols_V_out_full_n => img_cols_V_c_full_n,
        img_cols_V_out_write => readmem_U0_img_cols_V_out_write,
        index => index,
        baseAddr_address0 => readmem_U0_baseAddr_address0,
        baseAddr_ce0 => readmem_U0_baseAddr_ce0,
        baseAddr_q0 => baseAddr_q0);

    Loop_0_proc_U0 : component Loop_0_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => Loop_0_proc_U0_ap_start,
        ap_done => Loop_0_proc_U0_ap_done,
        ap_continue => Loop_0_proc_U0_ap_continue,
        ap_idle => Loop_0_proc_U0_ap_idle,
        ap_ready => Loop_0_proc_U0_ap_ready,
        img_cols_V_dout => img_cols_V_c_dout,
        img_cols_V_empty_n => img_cols_V_c_empty_n,
        img_cols_V_read => Loop_0_proc_U0_img_cols_V_read,
        cacheBuff1_i_dout => cacheBuff_dout,
        cacheBuff1_i_empty_n => cacheBuff_empty_n,
        cacheBuff1_i_read => Loop_0_proc_U0_cacheBuff1_i_read,
        img_data_stream_0_V_din => Loop_0_proc_U0_img_data_stream_0_V_din,
        img_data_stream_0_V_full_n => img_data_stream_0_V_full_n,
        img_data_stream_0_V_write => Loop_0_proc_U0_img_data_stream_0_V_write,
        img_data_stream_1_V_din => Loop_0_proc_U0_img_data_stream_1_V_din,
        img_data_stream_1_V_full_n => img_data_stream_1_V_full_n,
        img_data_stream_1_V_write => Loop_0_proc_U0_img_data_stream_1_V_write,
        img_data_stream_2_V_din => Loop_0_proc_U0_img_data_stream_2_V_din,
        img_data_stream_2_V_full_n => img_data_stream_2_V_full_n,
        img_data_stream_2_V_write => Loop_0_proc_U0_img_data_stream_2_V_write);

    cacheBuff_U : component fifo_w32_d3840_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => readmem_U0_to_r_din,
        if_full_n => cacheBuff_full_n,
        if_write => readmem_U0_to_r_write,
        if_dout => cacheBuff_dout,
        if_empty_n => cacheBuff_empty_n,
        if_read => Loop_0_proc_U0_cacheBuff1_i_read);

    img_cols_V_c_U : component fifo_w32_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => readmem_U0_img_cols_V_out_din,
        if_full_n => img_cols_V_c_full_n,
        if_write => readmem_U0_img_cols_V_out_write,
        if_dout => img_cols_V_c_dout,
        if_empty_n => img_cols_V_c_empty_n,
        if_read => Loop_0_proc_U0_img_cols_V_read);

    start_for_Loop_0_cud_U : component start_for_Loop_0_cud
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_Loop_0_proc_U0_din,
        if_full_n => start_for_Loop_0_proc_U0_full_n,
        if_write => readmem_U0_start_write,
        if_dout => start_for_Loop_0_proc_U0_dout,
        if_empty_n => start_for_Loop_0_proc_U0_empty_n,
        if_read => Loop_0_proc_U0_ap_ready);




    Loop_0_proc_U0_ap_continue <= ap_continue;
    Loop_0_proc_U0_ap_start <= start_for_Loop_0_proc_U0_empty_n;
    Loop_0_proc_U0_start_full_n <= ap_const_logic_1;
    Loop_0_proc_U0_start_write <= ap_const_logic_0;
    ap_done <= Loop_0_proc_U0_ap_done;
    ap_idle <= (readmem_U0_ap_idle and Loop_0_proc_U0_ap_idle);
    ap_ready <= readmem_U0_ap_ready;
    ap_sync_continue <= ap_continue;
    ap_sync_done <= Loop_0_proc_U0_ap_done;
    ap_sync_ready <= readmem_U0_ap_ready;
    baseAddr_address0 <= readmem_U0_baseAddr_address0;
    baseAddr_ce0 <= readmem_U0_baseAddr_ce0;
    baseAddr_d0 <= ap_const_lv32_0;
    baseAddr_we0 <= ap_const_logic_0;
    img_data_stream_0_V_din <= Loop_0_proc_U0_img_data_stream_0_V_din;
    img_data_stream_0_V_write <= Loop_0_proc_U0_img_data_stream_0_V_write;
    img_data_stream_1_V_din <= Loop_0_proc_U0_img_data_stream_1_V_din;
    img_data_stream_1_V_write <= Loop_0_proc_U0_img_data_stream_1_V_write;
    img_data_stream_2_V_din <= Loop_0_proc_U0_img_data_stream_2_V_din;
    img_data_stream_2_V_write <= Loop_0_proc_U0_img_data_stream_2_V_write;
    m_axi_pMemPort_ARADDR <= readmem_U0_m_axi_pMemPort_ARADDR;
    m_axi_pMemPort_ARBURST <= readmem_U0_m_axi_pMemPort_ARBURST;
    m_axi_pMemPort_ARCACHE <= readmem_U0_m_axi_pMemPort_ARCACHE;
    m_axi_pMemPort_ARID <= readmem_U0_m_axi_pMemPort_ARID;
    m_axi_pMemPort_ARLEN <= readmem_U0_m_axi_pMemPort_ARLEN;
    m_axi_pMemPort_ARLOCK <= readmem_U0_m_axi_pMemPort_ARLOCK;
    m_axi_pMemPort_ARPROT <= readmem_U0_m_axi_pMemPort_ARPROT;
    m_axi_pMemPort_ARQOS <= readmem_U0_m_axi_pMemPort_ARQOS;
    m_axi_pMemPort_ARREGION <= readmem_U0_m_axi_pMemPort_ARREGION;
    m_axi_pMemPort_ARSIZE <= readmem_U0_m_axi_pMemPort_ARSIZE;
    m_axi_pMemPort_ARUSER <= readmem_U0_m_axi_pMemPort_ARUSER;
    m_axi_pMemPort_ARVALID <= readmem_U0_m_axi_pMemPort_ARVALID;
    m_axi_pMemPort_AWADDR <= ap_const_lv32_0;
    m_axi_pMemPort_AWBURST <= ap_const_lv2_0;
    m_axi_pMemPort_AWCACHE <= ap_const_lv4_0;
    m_axi_pMemPort_AWID <= ap_const_lv1_0;
    m_axi_pMemPort_AWLEN <= ap_const_lv32_0;
    m_axi_pMemPort_AWLOCK <= ap_const_lv2_0;
    m_axi_pMemPort_AWPROT <= ap_const_lv3_0;
    m_axi_pMemPort_AWQOS <= ap_const_lv4_0;
    m_axi_pMemPort_AWREGION <= ap_const_lv4_0;
    m_axi_pMemPort_AWSIZE <= ap_const_lv3_0;
    m_axi_pMemPort_AWUSER <= ap_const_lv1_0;
    m_axi_pMemPort_AWVALID <= ap_const_logic_0;
    m_axi_pMemPort_BREADY <= ap_const_logic_0;
    m_axi_pMemPort_RREADY <= readmem_U0_m_axi_pMemPort_RREADY;
    m_axi_pMemPort_WDATA <= ap_const_lv32_0;
    m_axi_pMemPort_WID <= ap_const_lv1_0;
    m_axi_pMemPort_WLAST <= ap_const_logic_0;
    m_axi_pMemPort_WSTRB <= ap_const_lv4_0;
    m_axi_pMemPort_WUSER <= ap_const_lv1_0;
    m_axi_pMemPort_WVALID <= ap_const_logic_0;
    readmem_U0_ap_continue <= ap_const_logic_1;
    readmem_U0_ap_start <= ap_start;
    start_for_Loop_0_proc_U0_din <= (0=>ap_const_logic_1, others=>'-');
end behav;
