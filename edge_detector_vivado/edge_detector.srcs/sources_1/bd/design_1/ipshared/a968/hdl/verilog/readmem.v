// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module readmem (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        m_axi_pMemPort_AWVALID,
        m_axi_pMemPort_AWREADY,
        m_axi_pMemPort_AWADDR,
        m_axi_pMemPort_AWID,
        m_axi_pMemPort_AWLEN,
        m_axi_pMemPort_AWSIZE,
        m_axi_pMemPort_AWBURST,
        m_axi_pMemPort_AWLOCK,
        m_axi_pMemPort_AWCACHE,
        m_axi_pMemPort_AWPROT,
        m_axi_pMemPort_AWQOS,
        m_axi_pMemPort_AWREGION,
        m_axi_pMemPort_AWUSER,
        m_axi_pMemPort_WVALID,
        m_axi_pMemPort_WREADY,
        m_axi_pMemPort_WDATA,
        m_axi_pMemPort_WSTRB,
        m_axi_pMemPort_WLAST,
        m_axi_pMemPort_WID,
        m_axi_pMemPort_WUSER,
        m_axi_pMemPort_ARVALID,
        m_axi_pMemPort_ARREADY,
        m_axi_pMemPort_ARADDR,
        m_axi_pMemPort_ARID,
        m_axi_pMemPort_ARLEN,
        m_axi_pMemPort_ARSIZE,
        m_axi_pMemPort_ARBURST,
        m_axi_pMemPort_ARLOCK,
        m_axi_pMemPort_ARCACHE,
        m_axi_pMemPort_ARPROT,
        m_axi_pMemPort_ARQOS,
        m_axi_pMemPort_ARREGION,
        m_axi_pMemPort_ARUSER,
        m_axi_pMemPort_RVALID,
        m_axi_pMemPort_RREADY,
        m_axi_pMemPort_RDATA,
        m_axi_pMemPort_RLAST,
        m_axi_pMemPort_RID,
        m_axi_pMemPort_RUSER,
        m_axi_pMemPort_RRESP,
        m_axi_pMemPort_BVALID,
        m_axi_pMemPort_BREADY,
        m_axi_pMemPort_BRESP,
        m_axi_pMemPort_BID,
        m_axi_pMemPort_BUSER,
        w,
        row,
        rows,
        to_r_din,
        to_r_full_n,
        to_r_write,
        p_read1,
        img_cols_V_out_din,
        img_cols_V_out_full_n,
        img_cols_V_out_write,
        index,
        baseAddr_address0,
        baseAddr_ce0,
        baseAddr_q0
);

parameter    ap_ST_fsm_state1 = 25'd1;
parameter    ap_ST_fsm_state2 = 25'd2;
parameter    ap_ST_fsm_state3 = 25'd4;
parameter    ap_ST_fsm_state4 = 25'd8;
parameter    ap_ST_fsm_state5 = 25'd16;
parameter    ap_ST_fsm_state6 = 25'd32;
parameter    ap_ST_fsm_state7 = 25'd64;
parameter    ap_ST_fsm_state8 = 25'd128;
parameter    ap_ST_fsm_state9 = 25'd256;
parameter    ap_ST_fsm_state10 = 25'd512;
parameter    ap_ST_fsm_state11 = 25'd1024;
parameter    ap_ST_fsm_state12 = 25'd2048;
parameter    ap_ST_fsm_state13 = 25'd4096;
parameter    ap_ST_fsm_pp0_stage0 = 25'd8192;
parameter    ap_ST_fsm_state17 = 25'd16384;
parameter    ap_ST_fsm_state18 = 25'd32768;
parameter    ap_ST_fsm_state19 = 25'd65536;
parameter    ap_ST_fsm_state20 = 25'd131072;
parameter    ap_ST_fsm_state21 = 25'd262144;
parameter    ap_ST_fsm_state22 = 25'd524288;
parameter    ap_ST_fsm_state23 = 25'd1048576;
parameter    ap_ST_fsm_state24 = 25'd2097152;
parameter    ap_ST_fsm_pp1_stage0 = 25'd4194304;
parameter    ap_ST_fsm_state28 = 25'd8388608;
parameter    ap_ST_fsm_state29 = 25'd16777216;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
output   m_axi_pMemPort_AWVALID;
input   m_axi_pMemPort_AWREADY;
output  [31:0] m_axi_pMemPort_AWADDR;
output  [0:0] m_axi_pMemPort_AWID;
output  [31:0] m_axi_pMemPort_AWLEN;
output  [2:0] m_axi_pMemPort_AWSIZE;
output  [1:0] m_axi_pMemPort_AWBURST;
output  [1:0] m_axi_pMemPort_AWLOCK;
output  [3:0] m_axi_pMemPort_AWCACHE;
output  [2:0] m_axi_pMemPort_AWPROT;
output  [3:0] m_axi_pMemPort_AWQOS;
output  [3:0] m_axi_pMemPort_AWREGION;
output  [0:0] m_axi_pMemPort_AWUSER;
output   m_axi_pMemPort_WVALID;
input   m_axi_pMemPort_WREADY;
output  [31:0] m_axi_pMemPort_WDATA;
output  [3:0] m_axi_pMemPort_WSTRB;
output   m_axi_pMemPort_WLAST;
output  [0:0] m_axi_pMemPort_WID;
output  [0:0] m_axi_pMemPort_WUSER;
output   m_axi_pMemPort_ARVALID;
input   m_axi_pMemPort_ARREADY;
output  [31:0] m_axi_pMemPort_ARADDR;
output  [0:0] m_axi_pMemPort_ARID;
output  [31:0] m_axi_pMemPort_ARLEN;
output  [2:0] m_axi_pMemPort_ARSIZE;
output  [1:0] m_axi_pMemPort_ARBURST;
output  [1:0] m_axi_pMemPort_ARLOCK;
output  [3:0] m_axi_pMemPort_ARCACHE;
output  [2:0] m_axi_pMemPort_ARPROT;
output  [3:0] m_axi_pMemPort_ARQOS;
output  [3:0] m_axi_pMemPort_ARREGION;
output  [0:0] m_axi_pMemPort_ARUSER;
input   m_axi_pMemPort_RVALID;
output   m_axi_pMemPort_RREADY;
input  [31:0] m_axi_pMemPort_RDATA;
input   m_axi_pMemPort_RLAST;
input  [0:0] m_axi_pMemPort_RID;
input  [0:0] m_axi_pMemPort_RUSER;
input  [1:0] m_axi_pMemPort_RRESP;
input   m_axi_pMemPort_BVALID;
output   m_axi_pMemPort_BREADY;
input  [1:0] m_axi_pMemPort_BRESP;
input  [0:0] m_axi_pMemPort_BID;
input  [0:0] m_axi_pMemPort_BUSER;
input  [31:0] w;
input  [30:0] row;
input  [31:0] rows;
output  [31:0] to_r_din;
input   to_r_full_n;
output   to_r_write;
input  [31:0] p_read1;
output  [31:0] img_cols_V_out_din;
input   img_cols_V_out_full_n;
output   img_cols_V_out_write;
input  [31:0] index;
output  [1:0] baseAddr_address0;
output   baseAddr_ce0;
input  [31:0] baseAddr_q0;

reg ap_done;
reg ap_idle;
reg start_write;
reg m_axi_pMemPort_ARVALID;
reg[31:0] m_axi_pMemPort_ARADDR;
reg[31:0] m_axi_pMemPort_ARLEN;
reg m_axi_pMemPort_RREADY;
reg[31:0] to_r_din;
reg to_r_write;
reg img_cols_V_out_write;
reg baseAddr_ce0;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [24:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg   [31:0] cache_len;
reg    pMemPort_blk_n_AR;
wire    ap_CS_fsm_state18;
reg    pMemPort_blk_n_R;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0;
reg   [0:0] exitcond_i_i_reg_557;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond1_i_i_reg_538;
reg    to_r_blk_n;
reg    ap_enable_reg_pp1_iter2;
reg   [0:0] ap_reg_pp1_iter1_exitcond_i_i_reg_557;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] ap_reg_pp0_iter1_exitcond1_i_i_reg_538;
reg    img_cols_V_out_blk_n;
wire    ap_CS_fsm_state3;
reg   [29:0] indvar8_i_i_reg_205;
reg   [29:0] indvar_i_i_reg_216;
reg    ap_block_state1;
wire   [31:0] n_i_i_fu_266_p3;
reg   [31:0] n_i_i_reg_465;
wire    ap_CS_fsm_state2;
wire  signed [31:0] line_len_assign_fu_318_p4;
reg  signed [31:0] line_len_assign_reg_476;
wire   [31:0] tmp_4_i_i_fu_362_p2;
wire   [0:0] tmp_1_i_i_fu_356_p2;
wire  signed [31:0] tmp_2_i_i_fu_368_p2;
reg  signed [31:0] tmp_2_i_i_reg_490;
wire   [0:0] tmp_3_i_i_fu_374_p2;
wire   [32:0] tmp_6_cast_i_i_cast_fu_384_p1;
reg   [32:0] tmp_6_cast_i_i_cast_reg_499;
wire   [29:0] tmp_3_fu_388_p1;
reg   [29:0] tmp_3_reg_504;
reg   [31:0] pMemPort_addr_reg_510;
wire   [29:0] tmp_2_fu_398_p1;
reg   [29:0] tmp_2_reg_516;
wire   [31:0] grp_fu_402_p2;
reg   [31:0] tmp_i4_i_reg_522;
wire    ap_CS_fsm_state5;
reg   [31:0] pMemPort_addr_1_reg_527;
wire    ap_CS_fsm_state6;
wire   [31:0] tmp_17_add_i32_shr_c_fu_424_p1;
reg    ap_sig_ioackin_m_axi_pMemPort_ARREADY;
wire   [0:0] exitcond1_i_i_fu_428_p2;
wire    ap_block_state14_pp0_stage0_iter0;
reg    ap_block_state15_pp0_stage0_iter1;
reg    ap_block_state16_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
wire   [29:0] indvar_next9_i_i_fu_433_p2;
reg    ap_enable_reg_pp0_iter0;
reg   [31:0] pMemPort_addr_1_read_reg_547;
wire   [31:0] tmp_add_i32_shr_cas_fu_439_p1;
wire   [0:0] exitcond_i_i_fu_443_p2;
wire    ap_block_state25_pp1_stage0_iter0;
reg    ap_block_state26_pp1_stage0_iter1;
reg    ap_block_state27_pp1_stage0_iter2;
reg    ap_block_pp1_stage0_11001;
wire   [29:0] indvar_next_i_i_fu_448_p2;
reg    ap_enable_reg_pp1_iter0;
reg   [31:0] pMemPort_addr_read_reg_566;
wire    ap_CS_fsm_state13;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state14;
wire    ap_CS_fsm_state24;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state25;
reg   [31:0] storemerge_i_i_reg_227;
wire    ap_CS_fsm_state17;
wire  signed [63:0] tmp_11_i_i_fu_285_p1;
wire   [63:0] tmp_6_i_i_fu_380_p1;
wire  signed [63:0] p_sum_cast_i_i_fu_414_p1;
reg    ap_reg_ioackin_m_axi_pMemPort_ARREADY;
reg    ap_block_pp0_stage0_01001;
reg    ap_block_pp1_stage0_01001;
wire    ap_CS_fsm_state29;
wire   [31:0] tmp_i1_i_fu_347_p3;
wire   [30:0] tmp_1_fu_244_p4;
wire   [0:0] icmp_fu_254_p2;
wire   [31:0] tmp_8_i_i_fu_260_p2;
wire   [0:0] tmp_9_i_i_fu_274_p2;
wire   [31:0] n_1_i_i_fu_279_p3;
wire   [33:0] p_shl_i_i_fu_304_p3;
wire   [33:0] lhs_V_cast_i_i_fu_300_p1;
wire   [33:0] r_V_i_i_fu_312_p2;
wire   [30:0] tmp_fu_337_p4;
wire   [31:0] row_cast_i_i_fu_328_p1;
wire   [29:0] base_assign_fu_290_p4;
wire   [31:0] grp_fu_236_p2;
wire    ap_CS_fsm_state4;
wire  signed [32:0] tmp_5_cast_i_i_cast_fu_406_p1;
wire   [32:0] p_sum_i_i_fu_409_p2;
reg   [24:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 25'd1;
#0 cache_len = 32'd0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_reg_ioackin_m_axi_pMemPort_ARREADY = 1'b0;
end

mem2stream_mul_32bkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mem2stream_mul_32bkb_U7(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(line_len_assign_reg_476),
    .din1(tmp_2_i_i_reg_490),
    .ce(1'b1),
    .dout(grp_fu_402_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state29)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state14) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state13)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state14)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state14);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state13)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state25) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state24)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state25)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state25);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if ((1'b1 == ap_CS_fsm_state24)) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_pMemPort_ARREADY <= 1'b0;
    end else begin
        if ((((ap_sig_ioackin_m_axi_pMemPort_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state7)) | ((ap_sig_ioackin_m_axi_pMemPort_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state18)))) begin
            ap_reg_ioackin_m_axi_pMemPort_ARREADY <= 1'b0;
        end else if ((((m_axi_pMemPort_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state7)) | ((m_axi_pMemPort_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state18)))) begin
            ap_reg_ioackin_m_axi_pMemPort_ARREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond1_i_i_fu_428_p2 == 1'd0))) begin
        indvar8_i_i_reg_205 <= indvar_next9_i_i_fu_433_p2;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        indvar8_i_i_reg_205 <= 30'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond_i_i_fu_443_p2 == 1'd0))) begin
        indvar_i_i_reg_216 <= indvar_next_i_i_fu_448_p2;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        indvar_i_i_reg_216 <= 30'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        storemerge_i_i_reg_227 <= line_len_assign_reg_476;
    end else if (((1'b1 == ap_CS_fsm_state3) & (img_cols_V_out_full_n == 1'b1) & (tmp_1_i_i_fu_356_p2 == 1'd0))) begin
        storemerge_i_i_reg_227 <= tmp_4_i_i_fu_362_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_reg_pp0_iter1_exitcond1_i_i_reg_538 <= exitcond1_i_i_reg_538;
        exitcond1_i_i_reg_538 <= exitcond1_i_i_fu_428_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_reg_pp1_iter1_exitcond_i_i_reg_557 <= exitcond_i_i_reg_557;
        exitcond_i_i_reg_557 <= exitcond_i_i_fu_443_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        cache_len <= storemerge_i_i_reg_227;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (img_cols_V_out_full_n == 1'b1))) begin
        line_len_assign_reg_476 <= {{r_V_i_i_fu_312_p2[33:2]}};
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        n_i_i_reg_465 <= n_i_i_fu_266_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond1_i_i_reg_538 == 1'd0))) begin
        pMemPort_addr_1_read_reg_547 <= m_axi_pMemPort_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        pMemPort_addr_1_reg_527 <= p_sum_cast_i_i_fu_414_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond_i_i_reg_557 == 1'd0))) begin
        pMemPort_addr_read_reg_566 <= m_axi_pMemPort_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_3_i_i_fu_374_p2 == 1'd1) & (tmp_1_i_i_fu_356_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3) & (img_cols_V_out_full_n == 1'b1))) begin
        pMemPort_addr_reg_510[29 : 0] <= tmp_6_i_i_fu_380_p1[29 : 0];
        tmp_2_reg_516 <= tmp_2_fu_398_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_1_i_i_fu_356_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3) & (img_cols_V_out_full_n == 1'b1))) begin
        tmp_2_i_i_reg_490 <= tmp_2_i_i_fu_368_p2;
        tmp_6_cast_i_i_cast_reg_499[29 : 0] <= tmp_6_cast_i_i_cast_fu_384_p1[29 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_1_i_i_fu_356_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3) & (img_cols_V_out_full_n == 1'b1) & (tmp_3_i_i_fu_374_p2 == 1'd0))) begin
        tmp_3_reg_504 <= tmp_3_fu_388_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        tmp_i4_i_reg_522 <= grp_fu_402_p2;
    end
end

always @ (*) begin
    if ((exitcond1_i_i_fu_428_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state14 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state14 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond_i_i_fu_443_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state25 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state25 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_m_axi_pMemPort_ARREADY == 1'b0)) begin
        ap_sig_ioackin_m_axi_pMemPort_ARREADY = m_axi_pMemPort_ARREADY;
    end else begin
        ap_sig_ioackin_m_axi_pMemPort_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        baseAddr_ce0 = 1'b1;
    end else begin
        baseAddr_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        img_cols_V_out_blk_n = img_cols_V_out_full_n;
    end else begin
        img_cols_V_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (img_cols_V_out_full_n == 1'b1))) begin
        img_cols_V_out_write = 1'b1;
    end else begin
        img_cols_V_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_m_axi_pMemPort_ARREADY == 1'b0)) begin
        if ((1'b1 == ap_CS_fsm_state18)) begin
            m_axi_pMemPort_ARADDR = pMemPort_addr_reg_510;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            m_axi_pMemPort_ARADDR = pMemPort_addr_1_reg_527;
        end else begin
            m_axi_pMemPort_ARADDR = 'bx;
        end
    end else begin
        m_axi_pMemPort_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_m_axi_pMemPort_ARREADY == 1'b0)) begin
        if ((1'b1 == ap_CS_fsm_state18)) begin
            m_axi_pMemPort_ARLEN = tmp_add_i32_shr_cas_fu_439_p1;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            m_axi_pMemPort_ARLEN = tmp_17_add_i32_shr_c_fu_424_p1;
        end else begin
            m_axi_pMemPort_ARLEN = 'bx;
        end
    end else begin
        m_axi_pMemPort_ARLEN = 'bx;
    end
end

always @ (*) begin
    if ((((ap_reg_ioackin_m_axi_pMemPort_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state7)) | ((ap_reg_ioackin_m_axi_pMemPort_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state18)))) begin
        m_axi_pMemPort_ARVALID = 1'b1;
    end else begin
        m_axi_pMemPort_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond1_i_i_reg_538 == 1'd0)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond_i_i_reg_557 == 1'd0)))) begin
        m_axi_pMemPort_RREADY = 1'b1;
    end else begin
        m_axi_pMemPort_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state18))) begin
        pMemPort_blk_n_AR = m_axi_pMemPort_ARREADY;
    end else begin
        pMemPort_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (exitcond1_i_i_reg_538 == 1'd0)) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0) & (exitcond_i_i_reg_557 == 1'd0)))) begin
        pMemPort_blk_n_R = m_axi_pMemPort_RVALID;
    end else begin
        pMemPort_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_reg_pp0_iter1_exitcond1_i_i_reg_538 == 1'd0)) | ((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0) & (ap_reg_pp1_iter1_exitcond_i_i_reg_557 == 1'd0)))) begin
        to_r_blk_n = to_r_full_n;
    end else begin
        to_r_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_01001) & (ap_enable_reg_pp1_iter2 == 1'b1) & (ap_reg_pp1_iter1_exitcond_i_i_reg_557 == 1'd0))) begin
        to_r_din = pMemPort_addr_read_reg_566;
    end else if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_reg_pp0_iter1_exitcond1_i_i_reg_538 == 1'd0))) begin
        to_r_din = pMemPort_addr_1_read_reg_547;
    end else begin
        to_r_din = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_reg_pp0_iter1_exitcond1_i_i_reg_538 == 1'd0)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1) & (ap_reg_pp1_iter1_exitcond_i_i_reg_557 == 1'd0)))) begin
        to_r_write = 1'b1;
    end else begin
        to_r_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((tmp_3_i_i_fu_374_p2 == 1'd1) & (tmp_1_i_i_fu_356_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3) & (img_cols_V_out_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else if (((tmp_1_i_i_fu_356_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3) & (img_cols_V_out_full_n == 1'b1) & (tmp_3_i_i_fu_374_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else if (((1'b1 == ap_CS_fsm_state3) & (img_cols_V_out_full_n == 1'b1) & (tmp_1_i_i_fu_356_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (((ap_sig_ioackin_m_axi_pMemPort_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (exitcond1_i_i_fu_428_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (exitcond1_i_i_fu_428_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state18 : begin
            if (((ap_sig_ioackin_m_axi_pMemPort_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state18))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((1'b0 == ap_block_pp1_stage0_subdone) & (exitcond_i_i_fu_443_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0)) & ~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter2 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((1'b0 == ap_block_pp1_stage0_subdone) & (exitcond_i_i_fu_443_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0)) | ((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter2 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((to_r_full_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_reg_pp0_iter1_exitcond1_i_i_reg_538 == 1'd0)) | ((m_axi_pMemPort_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (exitcond1_i_i_reg_538 == 1'd0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((to_r_full_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_reg_pp0_iter1_exitcond1_i_i_reg_538 == 1'd0)) | ((m_axi_pMemPort_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (exitcond1_i_i_reg_538 == 1'd0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((to_r_full_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_reg_pp0_iter1_exitcond1_i_i_reg_538 == 1'd0)) | ((m_axi_pMemPort_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (exitcond1_i_i_reg_538 == 1'd0)));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_01001 = (((to_r_full_n == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (ap_reg_pp1_iter1_exitcond_i_i_reg_557 == 1'd0)) | ((m_axi_pMemPort_RVALID == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (exitcond_i_i_reg_557 == 1'd0)));
end

always @ (*) begin
    ap_block_pp1_stage0_11001 = (((to_r_full_n == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (ap_reg_pp1_iter1_exitcond_i_i_reg_557 == 1'd0)) | ((m_axi_pMemPort_RVALID == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (exitcond_i_i_reg_557 == 1'd0)));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = (((to_r_full_n == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (ap_reg_pp1_iter1_exitcond_i_i_reg_557 == 1'd0)) | ((m_axi_pMemPort_RVALID == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (exitcond_i_i_reg_557 == 1'd0)));
end

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (real_start == 1'b0));
end

assign ap_block_state14_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state15_pp0_stage0_iter1 = ((m_axi_pMemPort_RVALID == 1'b0) & (exitcond1_i_i_reg_538 == 1'd0));
end

always @ (*) begin
    ap_block_state16_pp0_stage0_iter2 = ((to_r_full_n == 1'b0) & (ap_reg_pp0_iter1_exitcond1_i_i_reg_538 == 1'd0));
end

assign ap_block_state25_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state26_pp1_stage0_iter1 = ((m_axi_pMemPort_RVALID == 1'b0) & (exitcond_i_i_reg_557 == 1'd0));
end

always @ (*) begin
    ap_block_state27_pp1_stage0_iter2 = ((to_r_full_n == 1'b0) & (ap_reg_pp1_iter1_exitcond_i_i_reg_557 == 1'd0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign baseAddr_address0 = tmp_11_i_i_fu_285_p1;

assign base_assign_fu_290_p4 = {{baseAddr_q0[31:2]}};

assign exitcond1_i_i_fu_428_p2 = ((indvar8_i_i_reg_205 == tmp_3_reg_504) ? 1'b1 : 1'b0);

assign exitcond_i_i_fu_443_p2 = ((indvar_i_i_reg_216 == tmp_2_reg_516) ? 1'b1 : 1'b0);

assign grp_fu_236_p2 = (tmp_i1_i_fu_347_p3 - cache_len);

assign icmp_fu_254_p2 = (($signed(tmp_1_fu_244_p4) < $signed(31'd1)) ? 1'b1 : 1'b0);

assign img_cols_V_out_din = p_read1;

assign indvar_next9_i_i_fu_433_p2 = (indvar8_i_i_reg_205 + 30'd1);

assign indvar_next_i_i_fu_448_p2 = (indvar_i_i_reg_216 + 30'd1);

assign lhs_V_cast_i_i_fu_300_p1 = p_read1;

assign line_len_assign_fu_318_p4 = {{r_V_i_i_fu_312_p2[33:2]}};

assign m_axi_pMemPort_ARBURST = 2'd0;

assign m_axi_pMemPort_ARCACHE = 4'd0;

assign m_axi_pMemPort_ARID = 1'd0;

assign m_axi_pMemPort_ARLOCK = 2'd0;

assign m_axi_pMemPort_ARPROT = 3'd0;

assign m_axi_pMemPort_ARQOS = 4'd0;

assign m_axi_pMemPort_ARREGION = 4'd0;

assign m_axi_pMemPort_ARSIZE = 3'd0;

assign m_axi_pMemPort_ARUSER = 1'd0;

assign m_axi_pMemPort_AWADDR = 32'd0;

assign m_axi_pMemPort_AWBURST = 2'd0;

assign m_axi_pMemPort_AWCACHE = 4'd0;

assign m_axi_pMemPort_AWID = 1'd0;

assign m_axi_pMemPort_AWLEN = 32'd0;

assign m_axi_pMemPort_AWLOCK = 2'd0;

assign m_axi_pMemPort_AWPROT = 3'd0;

assign m_axi_pMemPort_AWQOS = 4'd0;

assign m_axi_pMemPort_AWREGION = 4'd0;

assign m_axi_pMemPort_AWSIZE = 3'd0;

assign m_axi_pMemPort_AWUSER = 1'd0;

assign m_axi_pMemPort_AWVALID = 1'b0;

assign m_axi_pMemPort_BREADY = 1'b0;

assign m_axi_pMemPort_WDATA = 32'd0;

assign m_axi_pMemPort_WID = 1'd0;

assign m_axi_pMemPort_WLAST = 1'b0;

assign m_axi_pMemPort_WSTRB = 4'd0;

assign m_axi_pMemPort_WUSER = 1'd0;

assign m_axi_pMemPort_WVALID = 1'b0;

assign n_1_i_i_fu_279_p3 = ((tmp_9_i_i_fu_274_p2[0:0] === 1'b1) ? index : n_i_i_reg_465);

assign n_i_i_fu_266_p3 = ((icmp_fu_254_p2[0:0] === 1'b1) ? tmp_8_i_i_fu_260_p2 : 32'd0);

assign p_shl_i_i_fu_304_p3 = {{p_read1}, {2'd0}};

assign p_sum_cast_i_i_fu_414_p1 = $signed(p_sum_i_i_fu_409_p2);

assign p_sum_i_i_fu_409_p2 = ($signed(tmp_5_cast_i_i_cast_fu_406_p1) + $signed(tmp_6_cast_i_i_cast_reg_499));

assign r_V_i_i_fu_312_p2 = (p_shl_i_i_fu_304_p3 - lhs_V_cast_i_i_fu_300_p1);

assign row_cast_i_i_fu_328_p1 = row;

assign start_out = real_start;

assign tmp_11_i_i_fu_285_p1 = $signed(n_1_i_i_fu_279_p3);

assign tmp_17_add_i32_shr_c_fu_424_p1 = tmp_3_reg_504;

assign tmp_1_fu_244_p4 = {{index[31:1]}};

assign tmp_1_i_i_fu_356_p2 = ((cache_len < tmp_i1_i_fu_347_p3) ? 1'b1 : 1'b0);

assign tmp_2_fu_398_p1 = grp_fu_236_p2[29:0];

assign tmp_2_i_i_fu_368_p2 = (row_cast_i_i_fu_328_p1 + 32'd1);

assign tmp_3_fu_388_p1 = grp_fu_236_p2[29:0];

assign tmp_3_i_i_fu_374_p2 = ((tmp_2_i_i_fu_368_p2 == rows) ? 1'b1 : 1'b0);

assign tmp_4_i_i_fu_362_p2 = ($signed(cache_len) - $signed(line_len_assign_fu_318_p4));

assign tmp_5_cast_i_i_cast_fu_406_p1 = $signed(tmp_i4_i_reg_522);

assign tmp_6_cast_i_i_cast_fu_384_p1 = base_assign_fu_290_p4;

assign tmp_6_i_i_fu_380_p1 = base_assign_fu_290_p4;

assign tmp_8_i_i_fu_260_p2 = (index + 32'd1);

assign tmp_9_i_i_fu_274_p2 = ((n_i_i_reg_465 == w) ? 1'b1 : 1'b0);

assign tmp_add_i32_shr_cas_fu_439_p1 = tmp_2_reg_516;

assign tmp_fu_337_p4 = {{r_V_i_i_fu_312_p2[32:2]}};

assign tmp_i1_i_fu_347_p3 = {{tmp_fu_337_p4}, {1'd0}};

always @ (posedge ap_clk) begin
    tmp_6_cast_i_i_cast_reg_499[32:30] <= 3'b000;
    pMemPort_addr_reg_510[31:30] <= 2'b00;
end

endmodule //readmem
